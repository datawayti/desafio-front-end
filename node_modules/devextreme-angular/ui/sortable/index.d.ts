/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import DxSortable from 'devextreme/ui/sortable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * Sortable is a user interface utility that allows a UI component&apos;s items to be reordered via drag and drop gestures.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxSortableComponent extends DxComponent implements OnDestroy {
    instance: DxSortable;
    /**
     * 
    
     */
    allowDropInsideItem: boolean;
    /**
     * 
    
     */
    allowReordering: boolean;
    /**
     * 
    
     */
    autoScroll: boolean;
    /**
     * 
    
     */
    boundary: string | UserDefinedElement;
    /**
     * 
    
     */
    container: string | UserDefinedElement;
    /**
     * 
    
     */
    cursorOffset: string | {
        x?: number;
        y?: number;
    };
    /**
     * 
    
     */
    data: any;
    /**
     * 
    
     */
    dragDirection: string;
    /**
     * 
    
     */
    dragTemplate: any;
    /**
     * 
    
     */
    dropFeedbackMode: string;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    filter: string;
    /**
     * 
    
     */
    group: string;
    /**
     * 
    
     */
    handle: string;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    itemOrientation: string;
    /**
     * 
    
     */
    moveItemOnDrop: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    scrollSensitivity: number;
    /**
     * 
    
     */
    scrollSpeed: number;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onAdd: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragChange: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragEnd: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragMove: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragStart: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onRemove: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onReorder: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowDropInsideItemChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowReorderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    boundaryChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cursorOffsetChange: EventEmitter<string | {
        x?: number;
        y?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragDirectionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropFeedbackModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    filterChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    handleChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemOrientationChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    moveItemOnDropChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSensitivityChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSpeedChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSortable;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSortableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxSortableComponent, "dx-sortable", never, { "allowDropInsideItem": "allowDropInsideItem"; "allowReordering": "allowReordering"; "autoScroll": "autoScroll"; "boundary": "boundary"; "container": "container"; "cursorOffset": "cursorOffset"; "data": "data"; "dragDirection": "dragDirection"; "dragTemplate": "dragTemplate"; "dropFeedbackMode": "dropFeedbackMode"; "elementAttr": "elementAttr"; "filter": "filter"; "group": "group"; "handle": "handle"; "height": "height"; "itemOrientation": "itemOrientation"; "moveItemOnDrop": "moveItemOnDrop"; "rtlEnabled": "rtlEnabled"; "scrollSensitivity": "scrollSensitivity"; "scrollSpeed": "scrollSpeed"; "width": "width"; }, { "onAdd": "onAdd"; "onDisposing": "onDisposing"; "onDragChange": "onDragChange"; "onDragEnd": "onDragEnd"; "onDragMove": "onDragMove"; "onDragStart": "onDragStart"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onRemove": "onRemove"; "onReorder": "onReorder"; "allowDropInsideItemChange": "allowDropInsideItemChange"; "allowReorderingChange": "allowReorderingChange"; "autoScrollChange": "autoScrollChange"; "boundaryChange": "boundaryChange"; "containerChange": "containerChange"; "cursorOffsetChange": "cursorOffsetChange"; "dataChange": "dataChange"; "dragDirectionChange": "dragDirectionChange"; "dragTemplateChange": "dragTemplateChange"; "dropFeedbackModeChange": "dropFeedbackModeChange"; "elementAttrChange": "elementAttrChange"; "filterChange": "filterChange"; "groupChange": "groupChange"; "handleChange": "handleChange"; "heightChange": "heightChange"; "itemOrientationChange": "itemOrientationChange"; "moveItemOnDropChange": "moveItemOnDropChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollSensitivityChange": "scrollSensitivityChange"; "scrollSpeedChange": "scrollSpeedChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxSortableModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSortableModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxSortableModule, [typeof DxSortableComponent], [typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxSortableComponent, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxSortableModule>;
}

//# sourceMappingURL=index.d.ts.map