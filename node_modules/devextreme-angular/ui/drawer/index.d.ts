/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import DxDrawer from 'devextreme/ui/drawer';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * The Drawer is a dismissible or permanently visible panel used for navigation in responsive web application layouts.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxDrawerComponent extends DxComponent implements OnDestroy {
    instance: DxDrawer;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    animationDuration: number;
    /**
     * 
    
     */
    animationEnabled: boolean;
    /**
     * 
    
     */
    closeOnOutsideClick: boolean | Function;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    maxSize: number;
    /**
     * 
    
     */
    minSize: number;
    /**
     * 
    
     */
    opened: boolean;
    /**
     * 
    
     */
    openedStateMode: string;
    /**
     * 
    
     */
    position: string;
    /**
     * 
    
     */
    revealMode: string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    shading: boolean;
    /**
     * 
    
     * @deprecated 
    
     */
    target: string | UserDefinedElement;
    /**
     * 
    
     */
    template: any;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationDurationChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedStateModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    revealModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    targetChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    templateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDrawer;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDrawerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxDrawerComponent, "dx-drawer", never, { "activeStateEnabled": "activeStateEnabled"; "animationDuration": "animationDuration"; "animationEnabled": "animationEnabled"; "closeOnOutsideClick": "closeOnOutsideClick"; "disabled": "disabled"; "elementAttr": "elementAttr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "maxSize": "maxSize"; "minSize": "minSize"; "opened": "opened"; "openedStateMode": "openedStateMode"; "position": "position"; "revealMode": "revealMode"; "rtlEnabled": "rtlEnabled"; "shading": "shading"; "target": "target"; "template": "template"; "visible": "visible"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationDurationChange": "animationDurationChange"; "animationEnabledChange": "animationEnabledChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "maxSizeChange": "maxSizeChange"; "minSizeChange": "minSizeChange"; "openedChange": "openedChange"; "openedStateModeChange": "openedStateModeChange"; "positionChange": "positionChange"; "revealModeChange": "revealModeChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "targetChange": "targetChange"; "templateChange": "templateChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxDrawerModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDrawerModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxDrawerModule, [typeof DxDrawerComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxDrawerComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxDrawerModule>;
}

//# sourceMappingURL=index.d.ts.map