/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxSlideOutView from 'devextreme/ui/slide_out_view';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * The SlideOutView UI component is a classic slide-out menu paired with a view. This UI component is very similar to the SlideOut with only one difference - the SlideOut always contains the List in the slide-out menu, while the SlideOutView can hold any collection there.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxSlideOutViewComponent extends DxComponent implements OnDestroy {
    instance: DxSlideOutView;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    contentTemplate: any;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    menuPosition: string;
    /**
     * 
    
     */
    menuTemplate: any;
    /**
     * 
    
     */
    menuVisible: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    swipeEnabled: boolean;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuPositionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuVisibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    swipeEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSlideOutView;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSlideOutViewComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxSlideOutViewComponent, "dx-slide-out-view", never, { "activeStateEnabled": "activeStateEnabled"; "contentTemplate": "contentTemplate"; "disabled": "disabled"; "elementAttr": "elementAttr"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "menuPosition": "menuPosition"; "menuTemplate": "menuTemplate"; "menuVisible": "menuVisible"; "rtlEnabled": "rtlEnabled"; "swipeEnabled": "swipeEnabled"; "visible": "visible"; "width": "width"; }, { "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "activeStateEnabledChange": "activeStateEnabledChange"; "contentTemplateChange": "contentTemplateChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "menuPositionChange": "menuPositionChange"; "menuTemplateChange": "menuTemplateChange"; "menuVisibleChange": "menuVisibleChange"; "rtlEnabledChange": "rtlEnabledChange"; "swipeEnabledChange": "swipeEnabledChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxSlideOutViewModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSlideOutViewModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxSlideOutViewModule, [typeof DxSlideOutViewComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxSlideOutViewComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxSlideOutViewModule>;
}

//# sourceMappingURL=index.d.ts.map