/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { UserDefinedElement } from 'devextreme/core/element';
import DxDraggable from 'devextreme/ui/draggable';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * Draggable is a user interface utility that allows UI component elements to be dragged and dropped.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxDraggableComponent extends DxComponent implements OnDestroy {
    instance: DxDraggable;
    /**
     * 
    
     */
    autoScroll: boolean;
    /**
     * 
    
     */
    boundary: string | UserDefinedElement;
    /**
     * 
    
     */
    clone: boolean;
    /**
     * 
    
     */
    container: string | UserDefinedElement;
    /**
     * 
    
     */
    cursorOffset: string | {
        x?: number;
        y?: number;
    };
    /**
     * 
    
     */
    data: any;
    /**
     * 
    
     */
    dragDirection: string;
    /**
     * 
    
     */
    dragTemplate: any;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    group: string;
    /**
     * 
    
     */
    handle: string;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    scrollSensitivity: number;
    /**
     * 
    
     */
    scrollSpeed: number;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragEnd: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragMove: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDragStart: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoScrollChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    boundaryChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cloneChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cursorOffsetChange: EventEmitter<string | {
        x?: number;
        y?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragDirectionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dragTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    handleChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSensitivityChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollSpeedChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDraggable;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDraggableComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxDraggableComponent, "dx-draggable", never, { "autoScroll": "autoScroll"; "boundary": "boundary"; "clone": "clone"; "container": "container"; "cursorOffset": "cursorOffset"; "data": "data"; "dragDirection": "dragDirection"; "dragTemplate": "dragTemplate"; "elementAttr": "elementAttr"; "group": "group"; "handle": "handle"; "height": "height"; "rtlEnabled": "rtlEnabled"; "scrollSensitivity": "scrollSensitivity"; "scrollSpeed": "scrollSpeed"; "width": "width"; }, { "onDisposing": "onDisposing"; "onDragEnd": "onDragEnd"; "onDragMove": "onDragMove"; "onDragStart": "onDragStart"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "autoScrollChange": "autoScrollChange"; "boundaryChange": "boundaryChange"; "cloneChange": "cloneChange"; "containerChange": "containerChange"; "cursorOffsetChange": "cursorOffsetChange"; "dataChange": "dataChange"; "dragDirectionChange": "dragDirectionChange"; "dragTemplateChange": "dragTemplateChange"; "elementAttrChange": "elementAttrChange"; "groupChange": "groupChange"; "handleChange": "handleChange"; "heightChange": "heightChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollSensitivityChange": "scrollSensitivityChange"; "scrollSpeedChange": "scrollSpeedChange"; "widthChange": "widthChange"; }, never, ["*"]>;
}
export declare class DxDraggableModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDraggableModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxDraggableModule, [typeof DxDraggableComponent], [typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxDraggableComponent, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxDraggableModule>;
}

//# sourceMappingURL=index.d.ts.map