/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import DxTextBox from 'devextreme/ui/text_box';
import { ControlValueAccessor } from '@angular/forms';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiButtonComponent } from 'devextreme-angular/ui/nested';
/**
 * The TextBox is a UI component that enables a user to enter and edit a single line of text.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxTextBoxComponent extends DxComponent implements OnDestroy, ControlValueAccessor, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxTextBox;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    buttons: Array<string | DevExpress.ui.dxTextEditorButton>;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    inputAttr: any;
    /**
     * 
    
     */
    isValid: boolean;
    /**
     * 
    
     */
    mask: string;
    /**
     * 
    
     */
    maskChar: string;
    /**
     * 
    
     */
    maskInvalidMessage: string;
    /**
     * 
    
     */
    maskRules: any;
    /**
     * 
    
     */
    maxLength: number | string;
    /**
     * 
    
     */
    mode: string;
    /**
     * 
    
     */
    name: string;
    /**
     * 
    
     */
    placeholder: string;
    /**
     * 
    
     */
    readOnly: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    showClearButton: boolean;
    /**
     * 
    
     */
    showMaskMode: string;
    /**
     * 
    
     */
    spellcheck: boolean;
    /**
     * 
    
     */
    stylingMode: string;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    text: string;
    /**
     * 
    
     */
    useMaskedValue: boolean;
    /**
     * 
    
     */
    validationError: any;
    /**
     * 
    
     */
    validationErrors: Array<any>;
    /**
     * 
    
     */
    validationMessageMode: string;
    /**
     * 
    
     */
    validationStatus: string;
    /**
     * 
    
     */
    value: string;
    /**
     * 
    
     */
    valueChangeEvent: string;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onChange: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onCopy: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onCut: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onEnterKey: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onFocusIn: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onFocusOut: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInput: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onKeyDown: EventEmitter<any>;
    /**
    
     * 
    
     * @deprecated 
    
    
     */
    onKeyPress: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onKeyUp: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPaste: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onValueChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    buttonsChange: EventEmitter<Array<string | DevExpress.ui.dxTextEditorButton>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    inputAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    isValidChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maskChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maskCharChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maskInvalidMessageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maskRulesChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxLengthChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    modeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    placeholderChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    readOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showClearButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showMaskModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    spellcheckChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useMaskedValueChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationErrorsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationMessageModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    validationStatusChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueChangeEventChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * 
    
    
     */
    onBlur: EventEmitter<any>;
    change(_: any): void;
    touched: (_: any) => void;
    buttonsChildren: QueryList<DxiButtonComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxTextBox;
    writeValue(value: any): void;
    setDisabledState(isDisabled: boolean): void;
    registerOnChange(fn: (_: any) => void): void;
    registerOnTouched(fn: () => void): void;
    _createWidget(element: any): void;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxTextBoxComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxTextBoxComponent, "dx-text-box", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "buttons": "buttons"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "inputAttr": "inputAttr"; "isValid": "isValid"; "mask": "mask"; "maskChar": "maskChar"; "maskInvalidMessage": "maskInvalidMessage"; "maskRules": "maskRules"; "maxLength": "maxLength"; "mode": "mode"; "name": "name"; "placeholder": "placeholder"; "readOnly": "readOnly"; "rtlEnabled": "rtlEnabled"; "showClearButton": "showClearButton"; "showMaskMode": "showMaskMode"; "spellcheck": "spellcheck"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "text": "text"; "useMaskedValue": "useMaskedValue"; "validationError": "validationError"; "validationErrors": "validationErrors"; "validationMessageMode": "validationMessageMode"; "validationStatus": "validationStatus"; "value": "value"; "valueChangeEvent": "valueChangeEvent"; "visible": "visible"; "width": "width"; }, { "onChange": "onChange"; "onContentReady": "onContentReady"; "onCopy": "onCopy"; "onCut": "onCut"; "onDisposing": "onDisposing"; "onEnterKey": "onEnterKey"; "onFocusIn": "onFocusIn"; "onFocusOut": "onFocusOut"; "onInitialized": "onInitialized"; "onInput": "onInput"; "onKeyDown": "onKeyDown"; "onKeyPress": "onKeyPress"; "onKeyUp": "onKeyUp"; "onOptionChanged": "onOptionChanged"; "onPaste": "onPaste"; "onValueChanged": "onValueChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "buttonsChange": "buttonsChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "inputAttrChange": "inputAttrChange"; "isValidChange": "isValidChange"; "maskChange": "maskChange"; "maskCharChange": "maskCharChange"; "maskInvalidMessageChange": "maskInvalidMessageChange"; "maskRulesChange": "maskRulesChange"; "maxLengthChange": "maxLengthChange"; "modeChange": "modeChange"; "nameChange": "nameChange"; "placeholderChange": "placeholderChange"; "readOnlyChange": "readOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "showClearButtonChange": "showClearButtonChange"; "showMaskModeChange": "showMaskModeChange"; "spellcheckChange": "spellcheckChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "textChange": "textChange"; "useMaskedValueChange": "useMaskedValueChange"; "validationErrorChange": "validationErrorChange"; "validationErrorsChange": "validationErrorsChange"; "validationMessageModeChange": "validationMessageModeChange"; "validationStatusChange": "validationStatusChange"; "valueChange": "valueChange"; "valueChangeEventChange": "valueChangeEventChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "onBlur": "onBlur"; }, ["buttonsChildren"], never>;
}
export declare class DxTextBoxModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxTextBoxModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxTextBoxModule, [typeof DxTextBoxComponent], [typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxTextBoxComponent, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxTextBoxModule>;
}

//# sourceMappingURL=index.d.ts.map