/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxSortableOptions } from 'devextreme/ui/sortable';
import { dxTextBoxOptions } from 'devextreme/ui/text_box';
import DxList from 'devextreme/ui/list';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
import { DxiMenuItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The List is a UI component that represents a collection of items in a scrollable list.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxListComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxList;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    allowItemDeleting: boolean;
    /**
     * 
    
     */
    bounceEnabled: boolean;
    /**
     * 
    
     */
    collapsibleGroups: boolean;
    /**
     * 
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxListItem | any>;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    displayExpr: Function | string;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    grouped: boolean;
    /**
     * 
    
     */
    groupTemplate: any;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    indicateLoading: boolean;
    /**
     * 
    
     */
    itemDeleteMode: string;
    /**
     * 
    
     */
    itemDragging: dxSortableOptions;
    /**
     * 
    
     */
    itemHoldTimeout: number;
    /**
     * 
    
     */
    items: Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /**
     * 
    
     */
    itemTemplate: any;
    /**
     * 
    
     */
    keyExpr: Function | string;
    /**
     * 
    
     */
    menuItems: Array<any | {
        action?: Function;
        text?: string;
    }>;
    /**
     * 
    
     */
    menuMode: string;
    /**
     * 
    
     */
    nextButtonText: string;
    /**
     * 
    
     */
    noDataText: string;
    /**
     * 
    
     */
    pageLoadingText: string;
    /**
     * 
    
     */
    pageLoadMode: string;
    /**
     * 
    
     */
    pulledDownText: string;
    /**
     * 
    
     */
    pullingDownText: string;
    /**
     * 
    
     */
    pullRefreshEnabled: boolean;
    /**
     * 
    
     */
    refreshingText: string;
    /**
     * 
    
     */
    repaintChangesOnly: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    scrollByContent: boolean;
    /**
     * 
    
     */
    scrollByThumb: boolean;
    /**
     * 
    
     */
    scrollingEnabled: boolean;
    /**
     * 
    
     */
    searchEditorOptions: dxTextBoxOptions;
    /**
     * 
    
     */
    searchEnabled: boolean;
    /**
     * 
    
     */
    searchExpr: Function | string | Array<Function | string>;
    /**
     * 
    
     */
    searchMode: string;
    /**
     * 
    
     */
    searchTimeout: number;
    /**
     * 
    
     */
    searchValue: string;
    /**
     * 
    
     */
    selectAllMode: string;
    /**
     * 
    
     */
    selectedItemKeys: Array<any>;
    /**
     * 
    
     */
    selectedItems: Array<any>;
    /**
     * 
    
     */
    selectionMode: string;
    /**
     * 
    
     */
    showScrollbar: string;
    /**
     * 
    
     */
    showSelectionControls: boolean;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    useNativeScrolling: boolean;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onGroupRendered: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemDeleted: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemDeleting: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemHold: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemReordered: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemSwipe: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPageLoading: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPullRefresh: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onScroll: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectAllValueChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowItemDeletingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    bounceEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    collapsibleGroupsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<string | DevExpress.ui.dxListItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    groupTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicateLoadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemDeleteModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemDraggingChange: EventEmitter<dxSortableOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemHoldTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<string | any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        key?: string;
        showChevron?: boolean;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuItemsChange: EventEmitter<Array<any | {
        action?: Function;
        text?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    menuModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    nextButtonTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pageLoadModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pulledDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullingDownTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pullRefreshEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    refreshingTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    repaintChangesOnlyChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByContentChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollByThumbChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollingEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEditorOptionsChange: EventEmitter<dxTextBoxOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchExprChange: EventEmitter<Function | string | Array<Function | string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchTimeoutChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    searchValueChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectAllModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeysChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemsChange: EventEmitter<Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showScrollbarChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showSelectionControlsChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useNativeScrollingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    itemsChildren: QueryList<DxiItemComponent>;
    menuItemsChildren: QueryList<DxiMenuItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxList;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxListComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxListComponent, "dx-list", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowItemDeleting": "allowItemDeleting"; "bounceEnabled": "bounceEnabled"; "collapsibleGroups": "collapsibleGroups"; "dataSource": "dataSource"; "disabled": "disabled"; "displayExpr": "displayExpr"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "grouped": "grouped"; "groupTemplate": "groupTemplate"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "indicateLoading": "indicateLoading"; "itemDeleteMode": "itemDeleteMode"; "itemDragging": "itemDragging"; "itemHoldTimeout": "itemHoldTimeout"; "items": "items"; "itemTemplate": "itemTemplate"; "keyExpr": "keyExpr"; "menuItems": "menuItems"; "menuMode": "menuMode"; "nextButtonText": "nextButtonText"; "noDataText": "noDataText"; "pageLoadingText": "pageLoadingText"; "pageLoadMode": "pageLoadMode"; "pulledDownText": "pulledDownText"; "pullingDownText": "pullingDownText"; "pullRefreshEnabled": "pullRefreshEnabled"; "refreshingText": "refreshingText"; "repaintChangesOnly": "repaintChangesOnly"; "rtlEnabled": "rtlEnabled"; "scrollByContent": "scrollByContent"; "scrollByThumb": "scrollByThumb"; "scrollingEnabled": "scrollingEnabled"; "searchEditorOptions": "searchEditorOptions"; "searchEnabled": "searchEnabled"; "searchExpr": "searchExpr"; "searchMode": "searchMode"; "searchTimeout": "searchTimeout"; "searchValue": "searchValue"; "selectAllMode": "selectAllMode"; "selectedItemKeys": "selectedItemKeys"; "selectedItems": "selectedItems"; "selectionMode": "selectionMode"; "showScrollbar": "showScrollbar"; "showSelectionControls": "showSelectionControls"; "tabIndex": "tabIndex"; "useNativeScrolling": "useNativeScrolling"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onGroupRendered": "onGroupRendered"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemDeleted": "onItemDeleted"; "onItemDeleting": "onItemDeleting"; "onItemHold": "onItemHold"; "onItemRendered": "onItemRendered"; "onItemReordered": "onItemReordered"; "onItemSwipe": "onItemSwipe"; "onOptionChanged": "onOptionChanged"; "onPageLoading": "onPageLoading"; "onPullRefresh": "onPullRefresh"; "onScroll": "onScroll"; "onSelectAllValueChanged": "onSelectAllValueChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowItemDeletingChange": "allowItemDeletingChange"; "bounceEnabledChange": "bounceEnabledChange"; "collapsibleGroupsChange": "collapsibleGroupsChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "displayExprChange": "displayExprChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "groupedChange": "groupedChange"; "groupTemplateChange": "groupTemplateChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "indicateLoadingChange": "indicateLoadingChange"; "itemDeleteModeChange": "itemDeleteModeChange"; "itemDraggingChange": "itemDraggingChange"; "itemHoldTimeoutChange": "itemHoldTimeoutChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "keyExprChange": "keyExprChange"; "menuItemsChange": "menuItemsChange"; "menuModeChange": "menuModeChange"; "nextButtonTextChange": "nextButtonTextChange"; "noDataTextChange": "noDataTextChange"; "pageLoadingTextChange": "pageLoadingTextChange"; "pageLoadModeChange": "pageLoadModeChange"; "pulledDownTextChange": "pulledDownTextChange"; "pullingDownTextChange": "pullingDownTextChange"; "pullRefreshEnabledChange": "pullRefreshEnabledChange"; "refreshingTextChange": "refreshingTextChange"; "repaintChangesOnlyChange": "repaintChangesOnlyChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollByContentChange": "scrollByContentChange"; "scrollByThumbChange": "scrollByThumbChange"; "scrollingEnabledChange": "scrollingEnabledChange"; "searchEditorOptionsChange": "searchEditorOptionsChange"; "searchEnabledChange": "searchEnabledChange"; "searchExprChange": "searchExprChange"; "searchModeChange": "searchModeChange"; "searchTimeoutChange": "searchTimeoutChange"; "searchValueChange": "searchValueChange"; "selectAllModeChange": "selectAllModeChange"; "selectedItemKeysChange": "selectedItemKeysChange"; "selectedItemsChange": "selectedItemsChange"; "selectionModeChange": "selectionModeChange"; "showScrollbarChange": "showScrollbarChange"; "showSelectionControlsChange": "showSelectionControlsChange"; "tabIndexChange": "tabIndexChange"; "useNativeScrollingChange": "useNativeScrollingChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren", "menuItemsChildren"], never>;
}
export declare class DxListModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxListModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxListModule, [typeof DxListComponent], [typeof ɵngcc1.DxoItemDraggingModule, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxiMenuItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxListComponent, typeof ɵngcc1.DxoItemDraggingModule, typeof ɵngcc1.DxoCursorOffsetModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxiMenuItemModule, typeof ɵngcc1.DxoSearchEditorOptionsModule, typeof ɵngcc1.DxiButtonModule, typeof ɵngcc1.DxoOptionsModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxListModule>;
}

//# sourceMappingURL=index.d.ts.map