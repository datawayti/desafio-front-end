/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import { animationConfig } from 'devextreme/animation/fx';
import DevExpress from 'devextreme/bundles/dx.all';
import DxMenu from 'devextreme/ui/menu';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The Menu UI component is a panel with clickable items. A click on an item opens a drop-down menu, which can contain several submenus.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxMenuComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxMenu;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    adaptivityEnabled: boolean;
    /**
     * 
    
     */
    animation: {
        hide?: animationConfig;
        show?: animationConfig;
    };
    /**
     * 
    
     */
    cssClass: string;
    /**
     * 
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxMenuItem>;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    disabledExpr: Function | string;
    /**
     * 
    
     */
    displayExpr: Function | string;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hideSubmenuOnMouseLeave: boolean;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    items: Array<DevExpress.ui.dxMenuItem>;
    /**
     * 
    
     */
    itemsExpr: Function | string;
    /**
     * 
    
     */
    itemTemplate: any;
    /**
     * 
    
     */
    orientation: string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    selectByClick: boolean;
    /**
     * 
    
     */
    selectedExpr: Function | string;
    /**
     * 
    
     */
    selectedItem: any;
    /**
     * 
    
     */
    selectionMode: string;
    /**
     * 
    
     */
    showFirstSubmenuMode: string | {
        delay?: number | {
            hide?: number;
            show?: number;
        };
        name?: string;
    };
    /**
     * 
    
     */
    showSubmenuMode: string | {
        delay?: number | {
            hide?: number;
            show?: number;
        };
        name?: string;
    };
    /**
     * 
    
     */
    submenuDirection: string;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemContextMenu: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemRendered: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSubmenuHidden: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSubmenuHiding: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSubmenuShowing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSubmenuShown: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptivityEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: animationConfig;
        show?: animationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    cssClassChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxMenuItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hideSubmenuOnMouseLeaveChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<DevExpress.ui.dxMenuItem>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    orientationChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectByClickChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showFirstSubmenuModeChange: EventEmitter<string | {
        delay?: number | {
            hide?: number;
            show?: number;
        };
        name?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showSubmenuModeChange: EventEmitter<string | {
        delay?: number | {
            hide?: number;
            show?: number;
        };
        name?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    submenuDirectionChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxMenu;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxMenuComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxMenuComponent, "dx-menu", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "adaptivityEnabled": "adaptivityEnabled"; "animation": "animation"; "cssClass": "cssClass"; "dataSource": "dataSource"; "disabled": "disabled"; "disabledExpr": "disabledExpr"; "displayExpr": "displayExpr"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hideSubmenuOnMouseLeave": "hideSubmenuOnMouseLeave"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "items": "items"; "itemsExpr": "itemsExpr"; "itemTemplate": "itemTemplate"; "orientation": "orientation"; "rtlEnabled": "rtlEnabled"; "selectByClick": "selectByClick"; "selectedExpr": "selectedExpr"; "selectedItem": "selectedItem"; "selectionMode": "selectionMode"; "showFirstSubmenuMode": "showFirstSubmenuMode"; "showSubmenuMode": "showSubmenuMode"; "submenuDirection": "submenuDirection"; "tabIndex": "tabIndex"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onItemContextMenu": "onItemContextMenu"; "onItemRendered": "onItemRendered"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "onSubmenuHidden": "onSubmenuHidden"; "onSubmenuHiding": "onSubmenuHiding"; "onSubmenuShowing": "onSubmenuShowing"; "onSubmenuShown": "onSubmenuShown"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "adaptivityEnabledChange": "adaptivityEnabledChange"; "animationChange": "animationChange"; "cssClassChange": "cssClassChange"; "dataSourceChange": "dataSourceChange"; "disabledChange": "disabledChange"; "disabledExprChange": "disabledExprChange"; "displayExprChange": "displayExprChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hideSubmenuOnMouseLeaveChange": "hideSubmenuOnMouseLeaveChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemsChange": "itemsChange"; "itemsExprChange": "itemsExprChange"; "itemTemplateChange": "itemTemplateChange"; "orientationChange": "orientationChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectByClickChange": "selectByClickChange"; "selectedExprChange": "selectedExprChange"; "selectedItemChange": "selectedItemChange"; "selectionModeChange": "selectionModeChange"; "showFirstSubmenuModeChange": "showFirstSubmenuModeChange"; "showSubmenuModeChange": "showSubmenuModeChange"; "submenuDirectionChange": "submenuDirectionChange"; "tabIndexChange": "tabIndexChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, ["itemsChildren"], never>;
}
export declare class DxMenuModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxMenuModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxMenuModule, [typeof DxMenuComponent], [typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoShowFirstSubmenuModeModule, typeof ɵngcc1.DxoDelayModule, typeof ɵngcc1.DxoShowSubmenuModeModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxMenuComponent, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoShowFirstSubmenuModeModule, typeof ɵngcc1.DxoDelayModule, typeof ɵngcc1.DxoShowSubmenuModeModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxMenuModule>;
}

//# sourceMappingURL=index.d.ts.map