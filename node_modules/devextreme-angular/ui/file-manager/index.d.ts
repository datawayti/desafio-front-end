/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxFileManagerContextMenu, dxFileManagerToolbar } from 'devextreme/ui/file_manager';
import DxFileManager from 'devextreme/ui/file_manager';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
/**
 * The FileManager is a UI component that allows users to upload, select, and manage files and directories in different file storages.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxFileManagerComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxFileManager;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    allowedFileExtensions: Array<string>;
    /**
     * 
    
     */
    contextMenu: dxFileManagerContextMenu;
    /**
     * 
    
     */
    currentPath: string;
    /**
     * 
    
     */
    currentPathKeys: Array<string>;
    /**
     * 
    
     */
    customizeDetailColumns: Function;
    /**
     * 
    
     */
    customizeThumbnail: Function;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    fileSystemProvider: any;
    /**
     * 
    
     */
    focusedItemKey: string;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    itemView: {
        details?: {
            columns?: Array<DevExpress.ui.dxFileManagerDetailsColumn | string>;
        };
        mode?: string;
        showFolders?: boolean;
        showParentFolder?: boolean;
    };
    /**
     * 
    
     */
    notifications: {
        showPanel?: boolean;
        showPopup?: boolean;
    };
    /**
     * 
    
     */
    permissions: {
        copy?: boolean;
        create?: boolean;
        delete?: boolean;
        download?: boolean;
        move?: boolean;
        rename?: boolean;
        upload?: boolean;
    };
    /**
     * 
    
     */
    rootFolderName: string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    selectedItemKeys: Array<string>;
    /**
     * 
    
     */
    selectionMode: string;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    toolbar: dxFileManagerToolbar;
    /**
     * 
    
     */
    upload: {
        chunkSize?: number;
        maxFileSize?: number;
    };
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onContextMenuItemClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onContextMenuShowing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onCurrentDirectoryChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onErrorOccurred: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onFocusedItemChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectedFileOpened: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onToolbarItemClick: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    allowedFileExtensionsChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    contextMenuChange: EventEmitter<dxFileManagerContextMenu>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentPathChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    currentPathKeysChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeDetailColumnsChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeThumbnailChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    fileSystemProviderChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusedItemKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemViewChange: EventEmitter<{
        details?: {
            columns?: Array<DevExpress.ui.dxFileManagerDetailsColumn | string>;
        };
        mode?: string;
        showFolders?: boolean;
        showParentFolder?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    notificationsChange: EventEmitter<{
        showPanel?: boolean;
        showPopup?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    permissionsChange: EventEmitter<{
        copy?: boolean;
        create?: boolean;
        delete?: boolean;
        download?: boolean;
        move?: boolean;
        rename?: boolean;
        upload?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rootFolderNameChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeysChange: EventEmitter<Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    toolbarChange: EventEmitter<dxFileManagerToolbar>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    uploadChange: EventEmitter<{
        chunkSize?: number;
        maxFileSize?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxFileManager;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxFileManagerComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxFileManagerComponent, "dx-file-manager", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "allowedFileExtensions": "allowedFileExtensions"; "contextMenu": "contextMenu"; "currentPath": "currentPath"; "currentPathKeys": "currentPathKeys"; "customizeDetailColumns": "customizeDetailColumns"; "customizeThumbnail": "customizeThumbnail"; "disabled": "disabled"; "elementAttr": "elementAttr"; "fileSystemProvider": "fileSystemProvider"; "focusedItemKey": "focusedItemKey"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "itemView": "itemView"; "notifications": "notifications"; "permissions": "permissions"; "rootFolderName": "rootFolderName"; "rtlEnabled": "rtlEnabled"; "selectedItemKeys": "selectedItemKeys"; "selectionMode": "selectionMode"; "tabIndex": "tabIndex"; "toolbar": "toolbar"; "upload": "upload"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onContextMenuItemClick": "onContextMenuItemClick"; "onContextMenuShowing": "onContextMenuShowing"; "onCurrentDirectoryChanged": "onCurrentDirectoryChanged"; "onDisposing": "onDisposing"; "onErrorOccurred": "onErrorOccurred"; "onFocusedItemChanged": "onFocusedItemChanged"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onSelectedFileOpened": "onSelectedFileOpened"; "onSelectionChanged": "onSelectionChanged"; "onToolbarItemClick": "onToolbarItemClick"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "allowedFileExtensionsChange": "allowedFileExtensionsChange"; "contextMenuChange": "contextMenuChange"; "currentPathChange": "currentPathChange"; "currentPathKeysChange": "currentPathKeysChange"; "customizeDetailColumnsChange": "customizeDetailColumnsChange"; "customizeThumbnailChange": "customizeThumbnailChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "fileSystemProviderChange": "fileSystemProviderChange"; "focusedItemKeyChange": "focusedItemKeyChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "itemViewChange": "itemViewChange"; "notificationsChange": "notificationsChange"; "permissionsChange": "permissionsChange"; "rootFolderNameChange": "rootFolderNameChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectedItemKeysChange": "selectedItemKeysChange"; "selectionModeChange": "selectionModeChange"; "tabIndexChange": "tabIndexChange"; "toolbarChange": "toolbarChange"; "uploadChange": "uploadChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, never>;
}
export declare class DxFileManagerModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxFileManagerModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxFileManagerModule, [typeof DxFileManagerComponent], [typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoItemViewModule, typeof ɵngcc1.DxoDetailsModule, typeof ɵngcc1.DxiColumnModule, typeof ɵngcc1.DxoNotificationsModule, typeof ɵngcc1.DxoPermissionsModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiFileSelectionItemModule, typeof ɵngcc1.DxoUploadModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxFileManagerComponent, typeof ɵngcc1.DxoContextMenuModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc1.DxoItemViewModule, typeof ɵngcc1.DxoDetailsModule, typeof ɵngcc1.DxiColumnModule, typeof ɵngcc1.DxoNotificationsModule, typeof ɵngcc1.DxoPermissionsModule, typeof ɵngcc1.DxoToolbarModule, typeof ɵngcc1.DxiFileSelectionItemModule, typeof ɵngcc1.DxoUploadModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxFileManagerModule>;
}

//# sourceMappingURL=index.d.ts.map