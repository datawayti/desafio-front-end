/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import DxSpeedDialAction from 'devextreme/ui/speed_dial_action';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * The SpeedDialAction is a button that performs a custom action. It can be represented by a Floating Action Button (FAB) or a button in a speed dial menu opened with the FAB.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
export declare class DxSpeedDialActionComponent extends DxComponent implements OnDestroy {
    instance: DxSpeedDialAction;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    icon: string;
    /**
     * 
    
     */
    index: number;
    /**
     * 
    
     */
    label: string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    visible: boolean;
    /**
    
     * 
    
    
     */
    onClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    iconChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    labelChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxSpeedDialAction;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSpeedDialActionComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxSpeedDialActionComponent, "dx-speed-dial-action", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "icon": "icon"; "index": "index"; "label": "label"; "rtlEnabled": "rtlEnabled"; "tabIndex": "tabIndex"; "visible": "visible"; }, { "onClick": "onClick"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "iconChange": "iconChange"; "indexChange": "indexChange"; "labelChange": "labelChange"; "rtlEnabledChange": "rtlEnabledChange"; "tabIndexChange": "tabIndexChange"; "visibleChange": "visibleChange"; }, never, never>;
}
export declare class DxSpeedDialActionModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxSpeedDialActionModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxSpeedDialActionModule, [typeof DxSpeedDialActionComponent], [typeof ɵngcc1.DxIntegrationModule, typeof ɵngcc1.DxTemplateModule, typeof ɵngcc2.BrowserTransferStateModule], [typeof DxSpeedDialActionComponent, typeof ɵngcc1.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxSpeedDialActionModule>;
}

//# sourceMappingURL=index.d.ts.map