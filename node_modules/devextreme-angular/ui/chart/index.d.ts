/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { UserDefinedElement } from 'devextreme/core/element';
import { format } from 'devextreme/ui/widget/ui.widget';
import { dxChartCommonAnnotationConfig } from 'devextreme/viz/chart';
import { Font } from 'devextreme/viz/core/base_widget';
import DxChart from 'devextreme/viz/chart';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiAnnotationComponent } from 'devextreme-angular/ui/nested';
import { DxiPaneComponent } from 'devextreme-angular/ui/nested';
import { DxiSeriesComponent } from 'devextreme-angular/ui/nested';
import { DxiValueAxisComponent } from 'devextreme-angular/ui/nested';
/**
 * The Chart is a UI component that visualizes data from a local or remote storage using a great variety of series types along with different interactive elements, such as tooltips, crosshair pointer, legend, etc.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxChartComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxChart;
    /**
     * 
    
     */
    adaptiveLayout: {
        height?: number;
        keepLabels?: boolean;
        width?: number;
    };
    /**
     * 
    
     */
    adjustOnZoom: boolean;
    /**
     * 
    
     */
    animation: boolean | {
        duration?: number;
        easing?: string;
        enabled?: boolean;
        maxPointCountSupported?: number;
    };
    /**
     * 
    
     */
    annotations: Array<DevExpress.viz.dxChartAnnotationConfig | any>;
    /**
     * 
    
     */
    argumentAxis: {
        aggregateByCategory?: boolean;
        aggregationGroupWidth?: number;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean;
        argumentType?: string;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: string;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                text?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string;
        customPositionAxis?: string;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        holidays?: Array<Date | string | number>;
        hoverMode?: string;
        inverted?: boolean;
        label?: {
            alignment?: string;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: string;
            font?: Font;
            format?: format | string;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number;
        minVisualRangeLength?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        offset?: number;
        opacity?: number;
        placeholderSize?: number;
        position?: string;
        singleWorkdays?: Array<Date | string | number>;
        strips?: Array<any | {
            color?: string;
            endValue?: Date | number | string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                text?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: string;
            font?: Font;
            margin?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        type?: string;
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        visualRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        visualRangeUpdateMode?: string;
        wholeRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        width?: number;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    };
    /**
     * 
    
     */
    autoHidePointMarkers: boolean;
    /**
     * 
    
     */
    barGroupPadding: number;
    /**
     * 
    
     */
    barGroupWidth: number;
    /**
     * 
    
     */
    commonAnnotationSettings: dxChartCommonAnnotationConfig;
    /**
     * 
    
     */
    commonAxisSettings: {
        allowDecimals?: boolean;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                position?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: string;
            displayMode?: string;
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minValueMargin?: number;
        opacity?: number;
        placeholderSize?: number;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        title?: {
            alignment?: string;
            font?: Font;
            margin?: number;
            textOverflow?: string;
            wordWrap?: string;
        };
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        width?: number;
    };
    /**
     * 
    
     */
    commonPaneSettings: {
        backgroundColor?: string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: string;
            left?: boolean;
            opacity?: number;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
    };
    /**
     * 
    
     */
    commonSeriesSettings: any;
    /**
     * 
    
     */
    containerBackgroundColor: string;
    /**
     * 
    
     */
    crosshair: {
        color?: string;
        dashStyle?: string;
        enabled?: boolean;
        horizontalLine?: boolean | {
            color?: string;
            dashStyle?: string;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: format | string;
                visible?: boolean;
            };
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        label?: {
            backgroundColor?: string;
            customizeText?: Function;
            font?: Font;
            format?: format | string;
            visible?: boolean;
        };
        opacity?: number;
        verticalLine?: boolean | {
            color?: string;
            dashStyle?: string;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: format | string;
                visible?: boolean;
            };
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        width?: number;
    };
    /**
     * 
    
     */
    customizeAnnotation: Function;
    /**
     * 
    
     */
    customizeLabel: Function;
    /**
     * 
    
     */
    customizePoint: Function;
    /**
     * 
    
     */
    dataPrepareSettings: {
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    };
    /**
     * 
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>;
    /**
     * 
    
     */
    defaultPane: string;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    export: {
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    };
    /**
     * 
    
     */
    legend: {
        backgroundColor?: string;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: string;
        hoverMode?: string;
        itemsAlignment?: string;
        itemTextPosition?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any;
        orientation?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        position?: string;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: string;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: string;
        };
        verticalAlignment?: string;
        visible?: boolean;
    };
    /**
     * 
    
     */
    loadingIndicator: {
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    };
    /**
     * 
    
     */
    margin: {
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    };
    /**
     * 
    
     */
    maxBubbleSize: number;
    /**
     * 
    
     */
    minBubbleSize: number;
    /**
     * 
    
     */
    negativesAsZeroes: boolean;
    /**
     * 
    
     */
    palette: string | Array<string>;
    /**
     * 
    
     */
    paletteExtensionMode: string;
    /**
     * 
    
     */
    panes: Array<any | {
        backgroundColor?: string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: string;
            left?: boolean;
            opacity?: number;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
        height?: number | string;
        name?: string;
    }>;
    /**
     * 
    
     */
    pathModified: boolean;
    /**
     * 
    
     */
    pointSelectionMode: string;
    /**
     * 
    
     */
    redrawOnResize: boolean;
    /**
     * 
    
     */
    resizePanesOnZoom: boolean;
    /**
     * 
    
     */
    resolveLabelOverlapping: string;
    /**
     * 
    
     */
    rotated: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    scrollBar: {
        color?: string;
        offset?: number;
        opacity?: number;
        position?: string;
        visible?: boolean;
        width?: number;
    };
    /**
     * 
    
     */
    series: any | Array<any>;
    /**
     * 
    
     */
    seriesSelectionMode: string;
    /**
     * 
    
     */
    seriesTemplate: {
        customizeSeries?: Function;
        nameField?: string;
    };
    /**
     * 
    
     */
    size: {
        height?: number;
        width?: number;
    };
    /**
     * 
    
     */
    stickyHovering: boolean;
    /**
     * 
    
     */
    synchronizeMultiAxes: boolean;
    /**
     * 
    
     */
    theme: string;
    /**
     * 
    
     */
    title: string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    };
    /**
     * 
    
     */
    tooltip: {
        argumentFormat?: format | string;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: Function;
        enabled?: boolean;
        font?: Font;
        format?: format | string;
        interactive?: boolean;
        location?: string;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number;
    };
    /**
     * 
    
     */
    valueAxis: Array<any | {
        allowDecimals?: boolean;
        autoBreaksEnabled?: boolean;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: string;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                text?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: string;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: string;
            font?: Font;
            format?: format | string;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        maxAutoBreakCount?: number;
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number;
        minVisualRangeLength?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        multipleAxesSpacing?: number;
        name?: string;
        offset?: number;
        opacity?: number;
        pane?: string;
        placeholderSize?: number;
        position?: string;
        showZero?: boolean;
        strips?: Array<any | {
            color?: string;
            endValue?: Date | number | string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                text?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        synchronizedValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: string;
            font?: Font;
            margin?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        type?: string;
        valueMarginsEnabled?: boolean;
        valueType?: string;
        visible?: boolean;
        visualRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        visualRangeUpdateMode?: string;
        wholeRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        width?: number;
    }>;
    /**
     * 
    
     */
    zoomAndPan: {
        allowMouseWheel?: boolean;
        allowTouchGestures?: boolean;
        argumentAxis?: string;
        dragBoxStyle?: {
            color?: string;
            opacity?: number;
        };
        dragToZoom?: boolean;
        panKey?: string;
        valueAxis?: string;
    };
    /**
    
     * 
    
    
     */
    onArgumentAxisClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDone: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDrawn: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onExported: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onExporting: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onFileSaving: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onIncidentOccurred: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onLegendClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPointClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPointHoverChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onPointSelectionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSeriesClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSeriesHoverChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSeriesSelectionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onTooltipHidden: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onTooltipShown: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onZoomEnd: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onZoomStart: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adaptiveLayoutChange: EventEmitter<{
        height?: number;
        keepLabels?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    adjustOnZoomChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<boolean | {
        duration?: number;
        easing?: string;
        enabled?: boolean;
        maxPointCountSupported?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    annotationsChange: EventEmitter<Array<DevExpress.viz.dxChartAnnotationConfig | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    argumentAxisChange: EventEmitter<{
        aggregateByCategory?: boolean;
        aggregationGroupWidth?: number;
        aggregationInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        allowDecimals?: boolean;
        argumentType?: string;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: string;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                text?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string;
        customPositionAxis?: string;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        holidays?: Array<Date | string | number>;
        hoverMode?: string;
        inverted?: boolean;
        label?: {
            alignment?: string;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: string;
            font?: Font;
            format?: format | string;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number;
        minVisualRangeLength?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        offset?: number;
        opacity?: number;
        placeholderSize?: number;
        position?: string;
        singleWorkdays?: Array<Date | string | number>;
        strips?: Array<any | {
            color?: string;
            endValue?: Date | number | string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                text?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: string;
            font?: Font;
            margin?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        type?: string;
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        visualRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        visualRangeUpdateMode?: string;
        wholeRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        width?: number;
        workdaysOnly?: boolean;
        workWeek?: Array<number>;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    autoHidePointMarkersChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupPaddingChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    barGroupWidthChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAnnotationSettingsChange: EventEmitter<dxChartCommonAnnotationConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonAxisSettingsChange: EventEmitter<{
        allowDecimals?: boolean;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        color?: string;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                position?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: string;
            displayMode?: string;
            font?: Font;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minValueMargin?: number;
        opacity?: number;
        placeholderSize?: number;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        title?: {
            alignment?: string;
            font?: Font;
            margin?: number;
            textOverflow?: string;
            wordWrap?: string;
        };
        valueMarginsEnabled?: boolean;
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonPaneSettingsChange: EventEmitter<{
        backgroundColor?: string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: string;
            left?: boolean;
            opacity?: number;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    commonSeriesSettingsChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerBackgroundColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    crosshairChange: EventEmitter<{
        color?: string;
        dashStyle?: string;
        enabled?: boolean;
        horizontalLine?: boolean | {
            color?: string;
            dashStyle?: string;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: format | string;
                visible?: boolean;
            };
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        label?: {
            backgroundColor?: string;
            customizeText?: Function;
            font?: Font;
            format?: format | string;
            visible?: boolean;
        };
        opacity?: number;
        verticalLine?: boolean | {
            color?: string;
            dashStyle?: string;
            label?: {
                backgroundColor?: string;
                customizeText?: Function;
                font?: Font;
                format?: format | string;
                visible?: boolean;
            };
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeAnnotationChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizeLabelChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    customizePointChange: EventEmitter<Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataPrepareSettingsChange: EventEmitter<{
        checkTypeForAllData?: boolean;
        convertToAxisDataType?: boolean;
        sortingMethod?: boolean | Function;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    defaultPaneChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    exportChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        fileName?: string;
        formats?: Array<string>;
        margin?: number;
        printingEnabled?: boolean;
        proxyUrl?: string;
        svgToCanvas?: Function;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    legendChange: EventEmitter<{
        backgroundColor?: string;
        border?: {
            color?: string;
            cornerRadius?: number;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        columnCount?: number;
        columnItemSpacing?: number;
        customizeHint?: Function;
        customizeItems?: Function;
        customizeText?: Function;
        font?: Font;
        horizontalAlignment?: string;
        hoverMode?: string;
        itemsAlignment?: string;
        itemTextPosition?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        markerSize?: number;
        markerTemplate?: any;
        orientation?: string;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        position?: string;
        rowCount?: number;
        rowItemSpacing?: number;
        title?: string | {
            font?: Font;
            horizontalAlignment?: string;
            margin?: {
                bottom?: number;
                left?: number;
                right?: number;
                top?: number;
            };
            placeholderSize?: number;
            subtitle?: string | {
                font?: Font;
                offset?: number;
                text?: string;
            };
            text?: string;
            verticalAlignment?: string;
        };
        verticalAlignment?: string;
        visible?: boolean;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    loadingIndicatorChange: EventEmitter<{
        backgroundColor?: string;
        enabled?: boolean;
        font?: Font;
        show?: boolean;
        text?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    marginChange: EventEmitter<{
        bottom?: number;
        left?: number;
        right?: number;
        top?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxBubbleSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minBubbleSizeChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    negativesAsZeroesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteChange: EventEmitter<string | Array<string>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    paletteExtensionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    panesChange: EventEmitter<Array<any | {
        backgroundColor?: string;
        border?: {
            bottom?: boolean;
            color?: string;
            dashStyle?: string;
            left?: boolean;
            opacity?: number;
            right?: boolean;
            top?: boolean;
            visible?: boolean;
            width?: number;
        };
        height?: number | string;
        name?: string;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pathModifiedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    pointSelectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    redrawOnResizeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resizePanesOnZoomChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    resolveLabelOverlappingChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rotatedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    scrollBarChange: EventEmitter<{
        color?: string;
        offset?: number;
        opacity?: number;
        position?: string;
        visible?: boolean;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesChange: EventEmitter<any | Array<any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesSelectionModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    seriesTemplateChange: EventEmitter<{
        customizeSeries?: Function;
        nameField?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    sizeChange: EventEmitter<{
        height?: number;
        width?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stickyHoveringChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    synchronizeMultiAxesChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    themeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    titleChange: EventEmitter<string | {
        font?: Font;
        horizontalAlignment?: string;
        margin?: number | {
            bottom?: number;
            left?: number;
            right?: number;
            top?: number;
        };
        placeholderSize?: number;
        subtitle?: string | {
            font?: Font;
            offset?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        text?: string;
        textOverflow?: string;
        verticalAlignment?: string;
        wordWrap?: string;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tooltipChange: EventEmitter<{
        argumentFormat?: format | string;
        arrowLength?: number;
        border?: {
            color?: string;
            dashStyle?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        color?: string;
        container?: string | UserDefinedElement;
        contentTemplate?: any;
        cornerRadius?: number;
        customizeTooltip?: Function;
        enabled?: boolean;
        font?: Font;
        format?: format | string;
        interactive?: boolean;
        location?: string;
        opacity?: number;
        paddingLeftRight?: number;
        paddingTopBottom?: number;
        shadow?: {
            blur?: number;
            color?: string;
            offsetX?: number;
            offsetY?: number;
            opacity?: number;
        };
        shared?: boolean;
        zIndex?: number;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    valueAxisChange: EventEmitter<Array<any | {
        allowDecimals?: boolean;
        autoBreaksEnabled?: boolean;
        axisDivisionFactor?: number;
        breaks?: Array<DevExpress.viz.ScaleBreak>;
        breakStyle?: {
            color?: string;
            line?: string;
            width?: number;
        };
        categories?: Array<number | string | Date>;
        color?: string;
        constantLines?: Array<any | {
            color?: string;
            dashStyle?: string;
            displayBehindSeries?: boolean;
            extendAxis?: boolean;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                text?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            value?: Date | number | string;
            width?: number;
        }>;
        constantLineStyle?: {
            color?: string;
            dashStyle?: string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                position?: string;
                verticalAlignment?: string;
                visible?: boolean;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            width?: number;
        };
        customPosition?: Date | number | string;
        discreteAxisDivisionMode?: string;
        endOnTick?: boolean;
        grid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        inverted?: boolean;
        label?: {
            alignment?: string;
            customizeHint?: Function;
            customizeText?: Function;
            displayMode?: string;
            font?: Font;
            format?: format | string;
            indentFromAxis?: number;
            overlappingBehavior?: string;
            position?: string;
            rotationAngle?: number;
            staggeringSpacing?: number;
            template?: any;
            textOverflow?: string;
            visible?: boolean;
            wordWrap?: string;
        };
        linearThreshold?: number;
        logarithmBase?: number;
        maxAutoBreakCount?: number;
        maxValueMargin?: number;
        minorGrid?: {
            color?: string;
            opacity?: number;
            visible?: boolean;
            width?: number;
        };
        minorTick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        minorTickCount?: number;
        minorTickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        minValueMargin?: number;
        minVisualRangeLength?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        multipleAxesSpacing?: number;
        name?: string;
        offset?: number;
        opacity?: number;
        pane?: string;
        placeholderSize?: number;
        position?: string;
        showZero?: boolean;
        strips?: Array<any | {
            color?: string;
            endValue?: Date | number | string;
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                text?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
            startValue?: Date | number | string;
        }>;
        stripStyle?: {
            label?: {
                font?: Font;
                horizontalAlignment?: string;
                verticalAlignment?: string;
            };
            paddingLeftRight?: number;
            paddingTopBottom?: number;
        };
        synchronizedValue?: number;
        tick?: {
            color?: string;
            length?: number;
            opacity?: number;
            shift?: number;
            visible?: boolean;
            width?: number;
        };
        tickInterval?: number | string | {
            days?: number;
            hours?: number;
            milliseconds?: number;
            minutes?: number;
            months?: number;
            quarters?: number;
            seconds?: number;
            weeks?: number;
            years?: number;
        };
        title?: string | {
            alignment?: string;
            font?: Font;
            margin?: number;
            text?: string;
            textOverflow?: string;
            wordWrap?: string;
        };
        type?: string;
        valueMarginsEnabled?: boolean;
        valueType?: string;
        visible?: boolean;
        visualRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        visualRangeUpdateMode?: string;
        wholeRange?: DevExpress.viz.VizRange | Array<number | string | Date>;
        width?: number;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    zoomAndPanChange: EventEmitter<{
        allowMouseWheel?: boolean;
        allowTouchGestures?: boolean;
        argumentAxis?: string;
        dragBoxStyle?: {
            color?: string;
            opacity?: number;
        };
        dragToZoom?: boolean;
        panKey?: string;
        valueAxis?: string;
    }>;
    annotationsChildren: QueryList<DxiAnnotationComponent>;
    panesChildren: QueryList<DxiPaneComponent>;
    seriesChildren: QueryList<DxiSeriesComponent>;
    valueAxisChildren: QueryList<DxiValueAxisComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxChart;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxChartComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxChartComponent, "dx-chart", never, { "adaptiveLayout": "adaptiveLayout"; "adjustOnZoom": "adjustOnZoom"; "animation": "animation"; "annotations": "annotations"; "argumentAxis": "argumentAxis"; "autoHidePointMarkers": "autoHidePointMarkers"; "barGroupPadding": "barGroupPadding"; "barGroupWidth": "barGroupWidth"; "commonAnnotationSettings": "commonAnnotationSettings"; "commonAxisSettings": "commonAxisSettings"; "commonPaneSettings": "commonPaneSettings"; "commonSeriesSettings": "commonSeriesSettings"; "containerBackgroundColor": "containerBackgroundColor"; "crosshair": "crosshair"; "customizeAnnotation": "customizeAnnotation"; "customizeLabel": "customizeLabel"; "customizePoint": "customizePoint"; "dataPrepareSettings": "dataPrepareSettings"; "dataSource": "dataSource"; "defaultPane": "defaultPane"; "disabled": "disabled"; "elementAttr": "elementAttr"; "export": "export"; "legend": "legend"; "loadingIndicator": "loadingIndicator"; "margin": "margin"; "maxBubbleSize": "maxBubbleSize"; "minBubbleSize": "minBubbleSize"; "negativesAsZeroes": "negativesAsZeroes"; "palette": "palette"; "paletteExtensionMode": "paletteExtensionMode"; "panes": "panes"; "pathModified": "pathModified"; "pointSelectionMode": "pointSelectionMode"; "redrawOnResize": "redrawOnResize"; "resizePanesOnZoom": "resizePanesOnZoom"; "resolveLabelOverlapping": "resolveLabelOverlapping"; "rotated": "rotated"; "rtlEnabled": "rtlEnabled"; "scrollBar": "scrollBar"; "series": "series"; "seriesSelectionMode": "seriesSelectionMode"; "seriesTemplate": "seriesTemplate"; "size": "size"; "stickyHovering": "stickyHovering"; "synchronizeMultiAxes": "synchronizeMultiAxes"; "theme": "theme"; "title": "title"; "tooltip": "tooltip"; "valueAxis": "valueAxis"; "zoomAndPan": "zoomAndPan"; }, { "onArgumentAxisClick": "onArgumentAxisClick"; "onDisposing": "onDisposing"; "onDone": "onDone"; "onDrawn": "onDrawn"; "onExported": "onExported"; "onExporting": "onExporting"; "onFileSaving": "onFileSaving"; "onIncidentOccurred": "onIncidentOccurred"; "onInitialized": "onInitialized"; "onLegendClick": "onLegendClick"; "onOptionChanged": "onOptionChanged"; "onPointClick": "onPointClick"; "onPointHoverChanged": "onPointHoverChanged"; "onPointSelectionChanged": "onPointSelectionChanged"; "onSeriesClick": "onSeriesClick"; "onSeriesHoverChanged": "onSeriesHoverChanged"; "onSeriesSelectionChanged": "onSeriesSelectionChanged"; "onTooltipHidden": "onTooltipHidden"; "onTooltipShown": "onTooltipShown"; "onZoomEnd": "onZoomEnd"; "onZoomStart": "onZoomStart"; "adaptiveLayoutChange": "adaptiveLayoutChange"; "adjustOnZoomChange": "adjustOnZoomChange"; "animationChange": "animationChange"; "annotationsChange": "annotationsChange"; "argumentAxisChange": "argumentAxisChange"; "autoHidePointMarkersChange": "autoHidePointMarkersChange"; "barGroupPaddingChange": "barGroupPaddingChange"; "barGroupWidthChange": "barGroupWidthChange"; "commonAnnotationSettingsChange": "commonAnnotationSettingsChange"; "commonAxisSettingsChange": "commonAxisSettingsChange"; "commonPaneSettingsChange": "commonPaneSettingsChange"; "commonSeriesSettingsChange": "commonSeriesSettingsChange"; "containerBackgroundColorChange": "containerBackgroundColorChange"; "crosshairChange": "crosshairChange"; "customizeAnnotationChange": "customizeAnnotationChange"; "customizeLabelChange": "customizeLabelChange"; "customizePointChange": "customizePointChange"; "dataPrepareSettingsChange": "dataPrepareSettingsChange"; "dataSourceChange": "dataSourceChange"; "defaultPaneChange": "defaultPaneChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "exportChange": "exportChange"; "legendChange": "legendChange"; "loadingIndicatorChange": "loadingIndicatorChange"; "marginChange": "marginChange"; "maxBubbleSizeChange": "maxBubbleSizeChange"; "minBubbleSizeChange": "minBubbleSizeChange"; "negativesAsZeroesChange": "negativesAsZeroesChange"; "paletteChange": "paletteChange"; "paletteExtensionModeChange": "paletteExtensionModeChange"; "panesChange": "panesChange"; "pathModifiedChange": "pathModifiedChange"; "pointSelectionModeChange": "pointSelectionModeChange"; "redrawOnResizeChange": "redrawOnResizeChange"; "resizePanesOnZoomChange": "resizePanesOnZoomChange"; "resolveLabelOverlappingChange": "resolveLabelOverlappingChange"; "rotatedChange": "rotatedChange"; "rtlEnabledChange": "rtlEnabledChange"; "scrollBarChange": "scrollBarChange"; "seriesChange": "seriesChange"; "seriesSelectionModeChange": "seriesSelectionModeChange"; "seriesTemplateChange": "seriesTemplateChange"; "sizeChange": "sizeChange"; "stickyHoveringChange": "stickyHoveringChange"; "synchronizeMultiAxesChange": "synchronizeMultiAxesChange"; "themeChange": "themeChange"; "titleChange": "titleChange"; "tooltipChange": "tooltipChange"; "valueAxisChange": "valueAxisChange"; "zoomAndPanChange": "zoomAndPanChange"; }, ["annotationsChildren", "panesChildren", "seriesChildren", "valueAxisChildren"], never>;
}
export declare class DxChartModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxChartModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxChartModule, [typeof DxChartComponent], [typeof ɵngcc1.DxoAdaptiveLayoutModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxiAnnotationModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoImageModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc1.DxoArgumentAxisModule, typeof ɵngcc1.DxoAggregationIntervalModule, typeof ɵngcc1.DxiBreakModule, typeof ɵngcc1.DxoBreakStyleModule, typeof ɵngcc1.DxiConstantLineModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoConstantLineStyleModule, typeof ɵngcc1.DxoGridModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoMinorGridModule, typeof ɵngcc1.DxoMinorTickModule, typeof ɵngcc1.DxoMinorTickIntervalModule, typeof ɵngcc1.DxoMinVisualRangeLengthModule, typeof ɵngcc1.DxiStripModule, typeof ɵngcc1.DxoStripStyleModule, typeof ɵngcc1.DxoTickModule, typeof ɵngcc1.DxoTickIntervalModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoCommonAnnotationSettingsModule, typeof ɵngcc1.DxoCommonAxisSettingsModule, typeof ɵngcc1.DxoCommonPaneSettingsModule, typeof ɵngcc1.DxoCommonSeriesSettingsModule, typeof ɵngcc1.DxoAggregationModule, typeof ɵngcc1.DxoAreaModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoHatchingModule, typeof ɵngcc1.DxoConnectorModule, typeof ɵngcc1.DxoPointModule, typeof ɵngcc1.DxoHeightModule, typeof ɵngcc1.DxoUrlModule, typeof ɵngcc1.DxoWidthModule, typeof ɵngcc1.DxoSelectionStyleModule, typeof ɵngcc1.DxoReductionModule, typeof ɵngcc1.DxoValueErrorBarModule, typeof ɵngcc1.DxoBarModule, typeof ɵngcc1.DxoBubbleModule, typeof ɵngcc1.DxoCandlestickModule, typeof ɵngcc1.DxoFullstackedareaModule, typeof ɵngcc1.DxoFullstackedbarModule, typeof ɵngcc1.DxoFullstackedlineModule, typeof ɵngcc1.DxoFullstackedsplineModule, typeof ɵngcc1.DxoFullstackedsplineareaModule, typeof ɵngcc1.DxoArgumentFormatModule, typeof ɵngcc1.DxoLineModule, typeof ɵngcc1.DxoRangeareaModule, typeof ɵngcc1.DxoRangebarModule, typeof ɵngcc1.DxoScatterModule, typeof ɵngcc1.DxoSplineModule, typeof ɵngcc1.DxoSplineareaModule, typeof ɵngcc1.DxoStackedareaModule, typeof ɵngcc1.DxoStackedbarModule, typeof ɵngcc1.DxoStackedlineModule, typeof ɵngcc1.DxoStackedsplineModule, typeof ɵngcc1.DxoStackedsplineareaModule, typeof ɵngcc1.DxoStepareaModule, typeof ɵngcc1.DxoSteplineModule, typeof ɵngcc1.DxoStockModule, typeof ɵngcc1.DxoCrosshairModule, typeof ɵngcc1.DxoHorizontalLineModule, typeof ɵngcc1.DxoVerticalLineModule, typeof ɵngcc1.DxoDataPrepareSettingsModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoLegendModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxiPaneModule, typeof ɵngcc1.DxoScrollBarModule, typeof ɵngcc1.DxiSeriesModule, typeof ɵngcc1.DxoSeriesTemplateModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxiValueAxisModule, typeof ɵngcc1.DxoZoomAndPanModule, typeof ɵngcc1.DxoDragBoxStyleModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxChartComponent, typeof ɵngcc1.DxoAdaptiveLayoutModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxiAnnotationModule, typeof ɵngcc1.DxoBorderModule, typeof ɵngcc1.DxoFontModule, typeof ɵngcc1.DxoImageModule, typeof ɵngcc1.DxoShadowModule, typeof ɵngcc1.DxoArgumentAxisModule, typeof ɵngcc1.DxoAggregationIntervalModule, typeof ɵngcc1.DxiBreakModule, typeof ɵngcc1.DxoBreakStyleModule, typeof ɵngcc1.DxiConstantLineModule, typeof ɵngcc1.DxoLabelModule, typeof ɵngcc1.DxoConstantLineStyleModule, typeof ɵngcc1.DxoGridModule, typeof ɵngcc1.DxoFormatModule, typeof ɵngcc1.DxoMinorGridModule, typeof ɵngcc1.DxoMinorTickModule, typeof ɵngcc1.DxoMinorTickIntervalModule, typeof ɵngcc1.DxoMinVisualRangeLengthModule, typeof ɵngcc1.DxiStripModule, typeof ɵngcc1.DxoStripStyleModule, typeof ɵngcc1.DxoTickModule, typeof ɵngcc1.DxoTickIntervalModule, typeof ɵngcc1.DxoTitleModule, typeof ɵngcc1.DxoCommonAnnotationSettingsModule, typeof ɵngcc1.DxoCommonAxisSettingsModule, typeof ɵngcc1.DxoCommonPaneSettingsModule, typeof ɵngcc1.DxoCommonSeriesSettingsModule, typeof ɵngcc1.DxoAggregationModule, typeof ɵngcc1.DxoAreaModule, typeof ɵngcc1.DxoHoverStyleModule, typeof ɵngcc1.DxoHatchingModule, typeof ɵngcc1.DxoConnectorModule, typeof ɵngcc1.DxoPointModule, typeof ɵngcc1.DxoHeightModule, typeof ɵngcc1.DxoUrlModule, typeof ɵngcc1.DxoWidthModule, typeof ɵngcc1.DxoSelectionStyleModule, typeof ɵngcc1.DxoReductionModule, typeof ɵngcc1.DxoValueErrorBarModule, typeof ɵngcc1.DxoBarModule, typeof ɵngcc1.DxoBubbleModule, typeof ɵngcc1.DxoCandlestickModule, typeof ɵngcc1.DxoFullstackedareaModule, typeof ɵngcc1.DxoFullstackedbarModule, typeof ɵngcc1.DxoFullstackedlineModule, typeof ɵngcc1.DxoFullstackedsplineModule, typeof ɵngcc1.DxoFullstackedsplineareaModule, typeof ɵngcc1.DxoArgumentFormatModule, typeof ɵngcc1.DxoLineModule, typeof ɵngcc1.DxoRangeareaModule, typeof ɵngcc1.DxoRangebarModule, typeof ɵngcc1.DxoScatterModule, typeof ɵngcc1.DxoSplineModule, typeof ɵngcc1.DxoSplineareaModule, typeof ɵngcc1.DxoStackedareaModule, typeof ɵngcc1.DxoStackedbarModule, typeof ɵngcc1.DxoStackedlineModule, typeof ɵngcc1.DxoStackedsplineModule, typeof ɵngcc1.DxoStackedsplineareaModule, typeof ɵngcc1.DxoStepareaModule, typeof ɵngcc1.DxoSteplineModule, typeof ɵngcc1.DxoStockModule, typeof ɵngcc1.DxoCrosshairModule, typeof ɵngcc1.DxoHorizontalLineModule, typeof ɵngcc1.DxoVerticalLineModule, typeof ɵngcc1.DxoDataPrepareSettingsModule, typeof ɵngcc1.DxoExportModule, typeof ɵngcc1.DxoLegendModule, typeof ɵngcc1.DxoMarginModule, typeof ɵngcc1.DxoSubtitleModule, typeof ɵngcc1.DxoLoadingIndicatorModule, typeof ɵngcc1.DxiPaneModule, typeof ɵngcc1.DxoScrollBarModule, typeof ɵngcc1.DxiSeriesModule, typeof ɵngcc1.DxoSeriesTemplateModule, typeof ɵngcc1.DxoSizeModule, typeof ɵngcc1.DxoTooltipModule, typeof ɵngcc1.DxiValueAxisModule, typeof ɵngcc1.DxoZoomAndPanModule, typeof ɵngcc1.DxoDragBoxStyleModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxChartModule>;
}

//# sourceMappingURL=index.d.ts.map