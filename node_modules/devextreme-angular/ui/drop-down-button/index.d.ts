/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter, OnChanges, DoCheck, SimpleChanges, QueryList } from '@angular/core';
import DevExpress from 'devextreme/bundles/dx.all';
import { dxPopupOptions } from 'devextreme/ui/popup';
import DxDropDownButton from 'devextreme/ui/drop_down_button';
import { DxComponent, DxTemplateHost, NestedOptionHost, IterableDifferHelper, WatcherHelper } from 'devextreme-angular/core';
import { DxiItemComponent } from 'devextreme-angular/ui/nested';
/**
 * The DropDownButton is a button that opens a drop-down menu.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxDropDownButtonComponent extends DxComponent implements OnDestroy, OnChanges, DoCheck {
    private _watcherHelper;
    private _idh;
    instance: DxDropDownButton;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    dataSource: DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxDropDownButtonItem | any>;
    /**
     * 
    
     */
    deferRendering: boolean;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    displayExpr: Function | string;
    /**
     * 
    
     */
    dropDownContentTemplate: any;
    /**
     * 
    
     */
    dropDownOptions: dxPopupOptions;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    icon: string;
    /**
     * 
    
     */
    items: Array<any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        onClick?: Function | string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>;
    /**
     * 
    
     */
    itemTemplate: any;
    /**
     * 
    
     */
    keyExpr: string;
    /**
     * 
    
     */
    noDataText: string;
    /**
     * 
    
     */
    opened: boolean;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    selectedItem: any | number | string;
    /**
     * 
    
     */
    selectedItemKey: number | string;
    /**
     * 
    
     */
    showArrowIcon: boolean;
    /**
     * 
    
     */
    splitButton: boolean;
    /**
     * 
    
     */
    stylingMode: string;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    text: string;
    /**
     * 
    
     */
    useItemTextAsTitle: boolean;
    /**
     * 
    
     */
    useSelectMode: boolean;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
     * 
    
     */
    wrapItemText: boolean;
    /**
    
     * 
    
    
     */
    onButtonClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onItemClick: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onSelectionChanged: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dataSourceChange: EventEmitter<DevExpress.data.DataSource | DevExpress.data.DataSourceOptions | string | Array<DevExpress.ui.dxDropDownButtonItem | any>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    displayExprChange: EventEmitter<Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownContentTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    dropDownOptionsChange: EventEmitter<dxPopupOptions>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    iconChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemsChange: EventEmitter<Array<any | {
        badge?: string;
        disabled?: boolean;
        html?: string;
        icon?: string;
        onClick?: Function | string;
        template?: any;
        text?: string;
        visible?: boolean;
    }>>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    itemTemplateChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    keyExprChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    noDataTextChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    openedChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemChange: EventEmitter<any | number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    selectedItemKeyChange: EventEmitter<number | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showArrowIconChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    splitButtonChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    stylingModeChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    textChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useItemTextAsTitleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    useSelectModeChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    wrapItemTextChange: EventEmitter<boolean>;
    itemsChildren: QueryList<DxiItemComponent>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, _idh: IterableDifferHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDropDownButton;
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    setupChanges(prop: string, changes: SimpleChanges): void;
    ngDoCheck(): void;
    _setOption(name: string, value: any): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDropDownButtonComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxDropDownButtonComponent, "dx-drop-down-button", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "dataSource": "dataSource"; "deferRendering": "deferRendering"; "disabled": "disabled"; "displayExpr": "displayExpr"; "dropDownContentTemplate": "dropDownContentTemplate"; "dropDownOptions": "dropDownOptions"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "icon": "icon"; "items": "items"; "itemTemplate": "itemTemplate"; "keyExpr": "keyExpr"; "noDataText": "noDataText"; "opened": "opened"; "rtlEnabled": "rtlEnabled"; "selectedItem": "selectedItem"; "selectedItemKey": "selectedItemKey"; "showArrowIcon": "showArrowIcon"; "splitButton": "splitButton"; "stylingMode": "stylingMode"; "tabIndex": "tabIndex"; "text": "text"; "useItemTextAsTitle": "useItemTextAsTitle"; "useSelectMode": "useSelectMode"; "visible": "visible"; "width": "width"; "wrapItemText": "wrapItemText"; }, { "onButtonClick": "onButtonClick"; "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onItemClick": "onItemClick"; "onOptionChanged": "onOptionChanged"; "onSelectionChanged": "onSelectionChanged"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "dataSourceChange": "dataSourceChange"; "deferRenderingChange": "deferRenderingChange"; "disabledChange": "disabledChange"; "displayExprChange": "displayExprChange"; "dropDownContentTemplateChange": "dropDownContentTemplateChange"; "dropDownOptionsChange": "dropDownOptionsChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "iconChange": "iconChange"; "itemsChange": "itemsChange"; "itemTemplateChange": "itemTemplateChange"; "keyExprChange": "keyExprChange"; "noDataTextChange": "noDataTextChange"; "openedChange": "openedChange"; "rtlEnabledChange": "rtlEnabledChange"; "selectedItemChange": "selectedItemChange"; "selectedItemKeyChange": "selectedItemKeyChange"; "showArrowIconChange": "showArrowIconChange"; "splitButtonChange": "splitButtonChange"; "stylingModeChange": "stylingModeChange"; "tabIndexChange": "tabIndexChange"; "textChange": "textChange"; "useItemTextAsTitleChange": "useItemTextAsTitleChange"; "useSelectModeChange": "useSelectModeChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; "wrapItemTextChange": "wrapItemTextChange"; }, ["itemsChildren"], never>;
}
export declare class DxDropDownButtonModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDropDownButtonModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxDropDownButtonModule, [typeof DxDropDownButtonComponent], [typeof ɵngcc1.DxoDropDownOptionsModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc1.DxiToolbarItemModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxDropDownButtonComponent, typeof ɵngcc1.DxoDropDownOptionsModule, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc1.DxiToolbarItemModule, typeof ɵngcc1.DxiItemModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxDropDownButtonModule>;
}

//# sourceMappingURL=index.d.ts.map