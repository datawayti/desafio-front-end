/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { animationConfig } from 'devextreme/animation/fx';
import { DxPromise } from 'devextreme/core/utils/deferred';
import DxDeferRendering from 'devextreme/ui/defer_rendering';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * The DeferRendering is a UI component that waits for its content to be ready before rendering it. While the content is getting ready, the DeferRendering displays a loading indicator.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxDeferRenderingComponent extends DxComponent implements OnDestroy {
    instance: DxDeferRendering;
    /**
     * 
    
     */
    accessKey: string;
    /**
     * 
    
     */
    activeStateEnabled: boolean;
    /**
     * 
    
     */
    animation: animationConfig;
    /**
     * 
    
     */
    disabled: boolean;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    renderWhen: boolean | DxPromise;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    showLoadIndicator: boolean;
    /**
     * 
    
     */
    staggerItemSelector: string;
    /**
     * 
    
     */
    tabIndex: number;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onRendered: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onShown: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    accessKeyChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    activeStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<animationConfig>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    disabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    renderWhenChange: EventEmitter<boolean | DxPromise>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showLoadIndicatorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    staggerItemSelectorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    tabIndexChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxDeferRendering;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDeferRenderingComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxDeferRenderingComponent, "dx-defer-rendering", never, { "accessKey": "accessKey"; "activeStateEnabled": "activeStateEnabled"; "animation": "animation"; "disabled": "disabled"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "renderWhen": "renderWhen"; "rtlEnabled": "rtlEnabled"; "showLoadIndicator": "showLoadIndicator"; "staggerItemSelector": "staggerItemSelector"; "tabIndex": "tabIndex"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onRendered": "onRendered"; "onShown": "onShown"; "accessKeyChange": "accessKeyChange"; "activeStateEnabledChange": "activeStateEnabledChange"; "animationChange": "animationChange"; "disabledChange": "disabledChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "renderWhenChange": "renderWhenChange"; "rtlEnabledChange": "rtlEnabledChange"; "showLoadIndicatorChange": "showLoadIndicatorChange"; "staggerItemSelectorChange": "staggerItemSelectorChange"; "tabIndexChange": "tabIndexChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, never>;
}
export declare class DxDeferRenderingModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxDeferRenderingModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxDeferRenderingModule, [typeof DxDeferRenderingComponent], [typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxDeferRenderingComponent, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxDeferRenderingModule>;
}

//# sourceMappingURL=index.d.ts.map