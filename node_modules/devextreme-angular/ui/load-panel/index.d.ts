/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
import { TransferState } from '@angular/platform-browser';
import { ElementRef, NgZone, OnDestroy, EventEmitter } from '@angular/core';
import { animationConfig } from 'devextreme/animation/fx';
import DevExpress from 'devextreme/bundles/dx.all';
import { UserDefinedElement } from 'devextreme/core/element';
import DxLoadPanel from 'devextreme/ui/load_panel';
import { DxComponent, DxTemplateHost, NestedOptionHost, WatcherHelper } from 'devextreme-angular/core';
/**
 * The LoadPanel is an overlay UI component notifying the viewer that loading is in progress.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/ui/nested';
import * as ɵngcc2 from 'devextreme-angular/core';
import * as ɵngcc3 from '@angular/platform-browser';
export declare class DxLoadPanelComponent extends DxComponent implements OnDestroy {
    instance: DxLoadPanel;
    /**
     * 
    
     */
    animation: {
        hide?: animationConfig;
        show?: animationConfig;
    };
    /**
     * 
    
     */
    closeOnOutsideClick: boolean | Function;
    /**
     * 
    
     */
    container: string | UserDefinedElement;
    /**
     * 
    
     */
    deferRendering: boolean;
    /**
     * 
    
     */
    delay: number;
    /**
     * 
    
     */
    elementAttr: any;
    /**
     * 
    
     */
    focusStateEnabled: boolean;
    /**
     * 
    
     */
    height: number | Function | string;
    /**
     * 
    
     */
    hint: string;
    /**
     * 
    
     */
    hoverStateEnabled: boolean;
    /**
     * 
    
     */
    indicatorSrc: string;
    /**
     * 
    
     */
    maxHeight: number | Function | string;
    /**
     * 
    
     */
    maxWidth: number | Function | string;
    /**
     * 
    
     */
    message: string;
    /**
     * 
    
     */
    minHeight: number | Function | string;
    /**
     * 
    
     */
    minWidth: number | Function | string;
    /**
     * 
    
     */
    position: DevExpress.positionConfig | Function | string;
    /**
     * 
    
     */
    rtlEnabled: boolean;
    /**
     * 
    
     */
    shading: boolean;
    /**
     * 
    
     */
    shadingColor: string;
    /**
     * 
    
     */
    showIndicator: boolean;
    /**
     * 
    
     */
    showPane: boolean;
    /**
     * 
    
     */
    visible: boolean;
    /**
     * 
    
     */
    width: number | Function | string;
    /**
    
     * 
    
    
     */
    onContentReady: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onDisposing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onHidden: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onHiding: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onInitialized: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onOptionChanged: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onShowing: EventEmitter<any>;
    /**
    
     * 
    
    
     */
    onShown: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    animationChange: EventEmitter<{
        hide?: animationConfig;
        show?: animationConfig;
    }>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    closeOnOutsideClickChange: EventEmitter<boolean | Function>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    containerChange: EventEmitter<string | UserDefinedElement>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    deferRenderingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    delayChange: EventEmitter<number>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    elementAttrChange: EventEmitter<any>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    focusStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    heightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hintChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    hoverStateEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    indicatorSrcChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    maxWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    messageChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minHeightChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    minWidthChange: EventEmitter<number | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    positionChange: EventEmitter<DevExpress.positionConfig | Function | string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    rtlEnabledChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    shadingColorChange: EventEmitter<string>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showIndicatorChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    showPaneChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    visibleChange: EventEmitter<boolean>;
    /**
    
     * This member supports the internal infrastructure and is not intended to be used directly from your code.
    
     */
    widthChange: EventEmitter<number | Function | string>;
    constructor(elementRef: ElementRef, ngZone: NgZone, templateHost: DxTemplateHost, _watcherHelper: WatcherHelper, optionHost: NestedOptionHost, transferState: TransferState, platformId: any);
    protected _createInstance(element: any, options: any): DxLoadPanel;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxLoadPanelComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDeclaration<DxLoadPanelComponent, "dx-load-panel", never, { "animation": "animation"; "closeOnOutsideClick": "closeOnOutsideClick"; "container": "container"; "deferRendering": "deferRendering"; "delay": "delay"; "elementAttr": "elementAttr"; "focusStateEnabled": "focusStateEnabled"; "height": "height"; "hint": "hint"; "hoverStateEnabled": "hoverStateEnabled"; "indicatorSrc": "indicatorSrc"; "maxHeight": "maxHeight"; "maxWidth": "maxWidth"; "message": "message"; "minHeight": "minHeight"; "minWidth": "minWidth"; "position": "position"; "rtlEnabled": "rtlEnabled"; "shading": "shading"; "shadingColor": "shadingColor"; "showIndicator": "showIndicator"; "showPane": "showPane"; "visible": "visible"; "width": "width"; }, { "onContentReady": "onContentReady"; "onDisposing": "onDisposing"; "onHidden": "onHidden"; "onHiding": "onHiding"; "onInitialized": "onInitialized"; "onOptionChanged": "onOptionChanged"; "onShowing": "onShowing"; "onShown": "onShown"; "animationChange": "animationChange"; "closeOnOutsideClickChange": "closeOnOutsideClickChange"; "containerChange": "containerChange"; "deferRenderingChange": "deferRenderingChange"; "delayChange": "delayChange"; "elementAttrChange": "elementAttrChange"; "focusStateEnabledChange": "focusStateEnabledChange"; "heightChange": "heightChange"; "hintChange": "hintChange"; "hoverStateEnabledChange": "hoverStateEnabledChange"; "indicatorSrcChange": "indicatorSrcChange"; "maxHeightChange": "maxHeightChange"; "maxWidthChange": "maxWidthChange"; "messageChange": "messageChange"; "minHeightChange": "minHeightChange"; "minWidthChange": "minWidthChange"; "positionChange": "positionChange"; "rtlEnabledChange": "rtlEnabledChange"; "shadingChange": "shadingChange"; "shadingColorChange": "shadingColorChange"; "showIndicatorChange": "showIndicatorChange"; "showPaneChange": "showPaneChange"; "visibleChange": "visibleChange"; "widthChange": "widthChange"; }, never, never>;
}
export declare class DxLoadPanelModule {
    static ɵfac: ɵngcc0.ɵɵFactoryDeclaration<DxLoadPanelModule, never>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDeclaration<DxLoadPanelModule, [typeof DxLoadPanelComponent], [typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc2.DxIntegrationModule, typeof ɵngcc2.DxTemplateModule, typeof ɵngcc3.BrowserTransferStateModule], [typeof DxLoadPanelComponent, typeof ɵngcc1.DxoAnimationModule, typeof ɵngcc1.DxoHideModule, typeof ɵngcc1.DxoShowModule, typeof ɵngcc1.DxoPositionModule, typeof ɵngcc1.DxoAtModule, typeof ɵngcc1.DxoBoundaryOffsetModule, typeof ɵngcc1.DxoCollisionModule, typeof ɵngcc1.DxoMyModule, typeof ɵngcc1.DxoOffsetModule, typeof ɵngcc2.DxTemplateModule]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDeclaration<DxLoadPanelModule>;
}

//# sourceMappingURL=index.d.ts.map