import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxGantt from 'devextreme/ui/gantt';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiColumnComponent, DxiStripLineComponent, DxiColumnModule, DxiButtonModule, DxoHeaderFilterModule, DxoLookupModule, DxoFormatModule, DxoFormItemModule, DxoLabelModule, DxiValidationRuleModule, DxoContextMenuModule, DxiItemModule, DxoDependenciesModule, DxoEditingModule, DxoResourceAssignmentsModule, DxoResourcesModule, DxiStripLineModule, DxoTasksModule, DxoToolbarModule, DxoValidationModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Gantt is a UI component that displays the task flow and dependencies between tasks.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';
let DxGanttComponent = class DxGanttComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'contextMenuPreparing', emit: 'onContextMenuPreparing' },
            { subscribe: 'customCommand', emit: 'onCustomCommand' },
            { subscribe: 'dependencyDeleted', emit: 'onDependencyDeleted' },
            { subscribe: 'dependencyDeleting', emit: 'onDependencyDeleting' },
            { subscribe: 'dependencyInserted', emit: 'onDependencyInserted' },
            { subscribe: 'dependencyInserting', emit: 'onDependencyInserting' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'resourceAssigned', emit: 'onResourceAssigned' },
            { subscribe: 'resourceAssigning', emit: 'onResourceAssigning' },
            { subscribe: 'resourceDeleted', emit: 'onResourceDeleted' },
            { subscribe: 'resourceDeleting', emit: 'onResourceDeleting' },
            { subscribe: 'resourceInserted', emit: 'onResourceInserted' },
            { subscribe: 'resourceInserting', emit: 'onResourceInserting' },
            { subscribe: 'resourceManagerDialogShowing', emit: 'onResourceManagerDialogShowing' },
            { subscribe: 'resourceUnassigned', emit: 'onResourceUnassigned' },
            { subscribe: 'resourceUnassigning', emit: 'onResourceUnassigning' },
            { subscribe: 'selectionChanged', emit: 'onSelectionChanged' },
            { subscribe: 'taskClick', emit: 'onTaskClick' },
            { subscribe: 'taskDblClick', emit: 'onTaskDblClick' },
            { subscribe: 'taskDeleted', emit: 'onTaskDeleted' },
            { subscribe: 'taskDeleting', emit: 'onTaskDeleting' },
            { subscribe: 'taskEditDialogShowing', emit: 'onTaskEditDialogShowing' },
            { subscribe: 'taskInserted', emit: 'onTaskInserted' },
            { subscribe: 'taskInserting', emit: 'onTaskInserting' },
            { subscribe: 'taskMoving', emit: 'onTaskMoving' },
            { subscribe: 'taskUpdated', emit: 'onTaskUpdated' },
            { subscribe: 'taskUpdating', emit: 'onTaskUpdating' },
            { emit: 'accessKeyChange' },
            { emit: 'activeStateEnabledChange' },
            { emit: 'allowSelectionChange' },
            { emit: 'columnsChange' },
            { emit: 'contextMenuChange' },
            { emit: 'dependenciesChange' },
            { emit: 'disabledChange' },
            { emit: 'editingChange' },
            { emit: 'elementAttrChange' },
            { emit: 'firstDayOfWeekChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'resourceAssignmentsChange' },
            { emit: 'resourcesChange' },
            { emit: 'rootValueChange' },
            { emit: 'scaleTypeChange' },
            { emit: 'selectedRowKeyChange' },
            { emit: 'showResourcesChange' },
            { emit: 'showRowLinesChange' },
            { emit: 'stripLinesChange' },
            { emit: 'tabIndexChange' },
            { emit: 'taskContentTemplateChange' },
            { emit: 'taskListWidthChange' },
            { emit: 'taskProgressTooltipContentTemplateChange' },
            { emit: 'tasksChange' },
            { emit: 'taskTimeTooltipContentTemplateChange' },
            { emit: 'taskTitlePositionChange' },
            { emit: 'taskTooltipContentTemplateChange' },
            { emit: 'toolbarChange' },
            { emit: 'validationChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * 
    
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * 
    
     */
    get activeStateEnabled() {
        return this._getOption('activeStateEnabled');
    }
    set activeStateEnabled(value) {
        this._setOption('activeStateEnabled', value);
    }
    /**
     * 
    
     */
    get allowSelection() {
        return this._getOption('allowSelection');
    }
    set allowSelection(value) {
        this._setOption('allowSelection', value);
    }
    /**
     * 
    
     */
    get columns() {
        return this._getOption('columns');
    }
    set columns(value) {
        this._setOption('columns', value);
    }
    /**
     * 
    
     */
    get contextMenu() {
        return this._getOption('contextMenu');
    }
    set contextMenu(value) {
        this._setOption('contextMenu', value);
    }
    /**
     * 
    
     */
    get dependencies() {
        return this._getOption('dependencies');
    }
    set dependencies(value) {
        this._setOption('dependencies', value);
    }
    /**
     * 
    
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * 
    
     */
    get editing() {
        return this._getOption('editing');
    }
    set editing(value) {
        this._setOption('editing', value);
    }
    /**
     * 
    
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * 
    
     */
    get firstDayOfWeek() {
        return this._getOption('firstDayOfWeek');
    }
    set firstDayOfWeek(value) {
        this._setOption('firstDayOfWeek', value);
    }
    /**
     * 
    
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * 
    
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * 
    
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * 
    
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * 
    
     */
    get resourceAssignments() {
        return this._getOption('resourceAssignments');
    }
    set resourceAssignments(value) {
        this._setOption('resourceAssignments', value);
    }
    /**
     * 
    
     */
    get resources() {
        return this._getOption('resources');
    }
    set resources(value) {
        this._setOption('resources', value);
    }
    /**
     * 
    
     */
    get rootValue() {
        return this._getOption('rootValue');
    }
    set rootValue(value) {
        this._setOption('rootValue', value);
    }
    /**
     * 
    
     */
    get scaleType() {
        return this._getOption('scaleType');
    }
    set scaleType(value) {
        this._setOption('scaleType', value);
    }
    /**
     * 
    
     */
    get selectedRowKey() {
        return this._getOption('selectedRowKey');
    }
    set selectedRowKey(value) {
        this._setOption('selectedRowKey', value);
    }
    /**
     * 
    
     */
    get showResources() {
        return this._getOption('showResources');
    }
    set showResources(value) {
        this._setOption('showResources', value);
    }
    /**
     * 
    
     */
    get showRowLines() {
        return this._getOption('showRowLines');
    }
    set showRowLines(value) {
        this._setOption('showRowLines', value);
    }
    /**
     * 
    
     */
    get stripLines() {
        return this._getOption('stripLines');
    }
    set stripLines(value) {
        this._setOption('stripLines', value);
    }
    /**
     * 
    
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * 
    
     */
    get taskContentTemplate() {
        return this._getOption('taskContentTemplate');
    }
    set taskContentTemplate(value) {
        this._setOption('taskContentTemplate', value);
    }
    /**
     * 
    
     */
    get taskListWidth() {
        return this._getOption('taskListWidth');
    }
    set taskListWidth(value) {
        this._setOption('taskListWidth', value);
    }
    /**
     * 
    
     */
    get taskProgressTooltipContentTemplate() {
        return this._getOption('taskProgressTooltipContentTemplate');
    }
    set taskProgressTooltipContentTemplate(value) {
        this._setOption('taskProgressTooltipContentTemplate', value);
    }
    /**
     * 
    
     */
    get tasks() {
        return this._getOption('tasks');
    }
    set tasks(value) {
        this._setOption('tasks', value);
    }
    /**
     * 
    
     */
    get taskTimeTooltipContentTemplate() {
        return this._getOption('taskTimeTooltipContentTemplate');
    }
    set taskTimeTooltipContentTemplate(value) {
        this._setOption('taskTimeTooltipContentTemplate', value);
    }
    /**
     * 
    
     */
    get taskTitlePosition() {
        return this._getOption('taskTitlePosition');
    }
    set taskTitlePosition(value) {
        this._setOption('taskTitlePosition', value);
    }
    /**
     * 
    
     */
    get taskTooltipContentTemplate() {
        return this._getOption('taskTooltipContentTemplate');
    }
    set taskTooltipContentTemplate(value) {
        this._setOption('taskTooltipContentTemplate', value);
    }
    /**
     * 
    
     */
    get toolbar() {
        return this._getOption('toolbar');
    }
    set toolbar(value) {
        this._setOption('toolbar', value);
    }
    /**
     * 
    
     */
    get validation() {
        return this._getOption('validation');
    }
    set validation(value) {
        this._setOption('validation', value);
    }
    /**
     * 
    
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * 
    
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    get columnsChildren() {
        return this._getOption('columns');
    }
    set columnsChildren(value) {
        this.setChildren('columns', value);
    }
    get stripLinesChildren() {
        return this._getOption('stripLines');
    }
    set stripLinesChildren(value) {
        this.setChildren('stripLines', value);
    }
    _createInstance(element, options) {
        return new DxGantt(element, options);
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('columns', changes);
        this.setupChanges('stripLines', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('columns');
        this._idh.doCheck('stripLines');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxGanttComponent.ɵfac = function DxGanttComponent_Factory(t) { return new (t || DxGanttComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxGanttComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxGanttComponent, selectors: [["dx-gantt"]], contentQueries: function DxGanttComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiColumnComponent, 4);
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiStripLineComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.columnsChildren = _t);
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.stripLinesChildren = _t);
    } }, inputs: { accessKey: "accessKey", activeStateEnabled: "activeStateEnabled", allowSelection: "allowSelection", columns: "columns", contextMenu: "contextMenu", dependencies: "dependencies", disabled: "disabled", editing: "editing", elementAttr: "elementAttr", firstDayOfWeek: "firstDayOfWeek", focusStateEnabled: "focusStateEnabled", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", resourceAssignments: "resourceAssignments", resources: "resources", rootValue: "rootValue", scaleType: "scaleType", selectedRowKey: "selectedRowKey", showResources: "showResources", showRowLines: "showRowLines", stripLines: "stripLines", tabIndex: "tabIndex", taskContentTemplate: "taskContentTemplate", taskListWidth: "taskListWidth", taskProgressTooltipContentTemplate: "taskProgressTooltipContentTemplate", tasks: "tasks", taskTimeTooltipContentTemplate: "taskTimeTooltipContentTemplate", taskTitlePosition: "taskTitlePosition", taskTooltipContentTemplate: "taskTooltipContentTemplate", toolbar: "toolbar", validation: "validation", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onContextMenuPreparing: "onContextMenuPreparing", onCustomCommand: "onCustomCommand", onDependencyDeleted: "onDependencyDeleted", onDependencyDeleting: "onDependencyDeleting", onDependencyInserted: "onDependencyInserted", onDependencyInserting: "onDependencyInserting", onDisposing: "onDisposing", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResourceAssigned: "onResourceAssigned", onResourceAssigning: "onResourceAssigning", onResourceDeleted: "onResourceDeleted", onResourceDeleting: "onResourceDeleting", onResourceInserted: "onResourceInserted", onResourceInserting: "onResourceInserting", onResourceManagerDialogShowing: "onResourceManagerDialogShowing", onResourceUnassigned: "onResourceUnassigned", onResourceUnassigning: "onResourceUnassigning", onSelectionChanged: "onSelectionChanged", onTaskClick: "onTaskClick", onTaskDblClick: "onTaskDblClick", onTaskDeleted: "onTaskDeleted", onTaskDeleting: "onTaskDeleting", onTaskEditDialogShowing: "onTaskEditDialogShowing", onTaskInserted: "onTaskInserted", onTaskInserting: "onTaskInserting", onTaskMoving: "onTaskMoving", onTaskUpdated: "onTaskUpdated", onTaskUpdating: "onTaskUpdating", accessKeyChange: "accessKeyChange", activeStateEnabledChange: "activeStateEnabledChange", allowSelectionChange: "allowSelectionChange", columnsChange: "columnsChange", contextMenuChange: "contextMenuChange", dependenciesChange: "dependenciesChange", disabledChange: "disabledChange", editingChange: "editingChange", elementAttrChange: "elementAttrChange", firstDayOfWeekChange: "firstDayOfWeekChange", focusStateEnabledChange: "focusStateEnabledChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", resourceAssignmentsChange: "resourceAssignmentsChange", resourcesChange: "resourcesChange", rootValueChange: "rootValueChange", scaleTypeChange: "scaleTypeChange", selectedRowKeyChange: "selectedRowKeyChange", showResourcesChange: "showResourcesChange", showRowLinesChange: "showRowLinesChange", stripLinesChange: "stripLinesChange", tabIndexChange: "tabIndexChange", taskContentTemplateChange: "taskContentTemplateChange", taskListWidthChange: "taskListWidthChange", taskProgressTooltipContentTemplateChange: "taskProgressTooltipContentTemplateChange", tasksChange: "tasksChange", taskTimeTooltipContentTemplateChange: "taskTimeTooltipContentTemplateChange", taskTitlePositionChange: "taskTitlePositionChange", taskTooltipContentTemplateChange: "taskTooltipContentTemplateChange", toolbarChange: "toolbarChange", validationChange: "validationChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], decls: 0, vars: 0, template: function DxGanttComponent_Template(rf, ctx) { }, encapsulation: 2 });
DxGanttComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxGanttComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "activeStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "allowSelection", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxGanttComponent.prototype, "columns", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "contextMenu", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "dependencies", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "editing", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "firstDayOfWeek", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxGanttComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "resourceAssignments", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "resources", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "rootValue", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxGanttComponent.prototype, "scaleType", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "selectedRowKey", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "showResources", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "showRowLines", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxGanttComponent.prototype, "stripLines", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxGanttComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "taskContentTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxGanttComponent.prototype, "taskListWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "taskProgressTooltipContentTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "tasks", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "taskTimeTooltipContentTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxGanttComponent.prototype, "taskTitlePosition", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "taskTooltipContentTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "toolbar", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "validation", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxGanttComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onContextMenuPreparing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onCustomCommand", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onDependencyDeleted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onDependencyDeleting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onDependencyInserted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onDependencyInserting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceAssigned", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceAssigning", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceDeleted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceDeleting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceInserted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceInserting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceManagerDialogShowing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceUnassigned", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onResourceUnassigning", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onSelectionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskDblClick", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskDeleted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskDeleting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskEditDialogShowing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskInserted", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskInserting", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskMoving", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskUpdated", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "onTaskUpdating", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "activeStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "allowSelectionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "columnsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "contextMenuChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "dependenciesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "editingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "firstDayOfWeekChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "resourceAssignmentsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "resourcesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "rootValueChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "scaleTypeChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "selectedRowKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "showResourcesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "showRowLinesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "stripLinesChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskContentTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskListWidthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskProgressTooltipContentTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "tasksChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskTimeTooltipContentTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskTitlePositionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "taskTooltipContentTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "toolbarChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "validationChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxGanttComponent.prototype, "widthChange", void 0);
__decorate([
    ContentChildren(DxiColumnComponent),
    __metadata("design:type", QueryList),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "columnsChildren", null);
__decorate([
    ContentChildren(DxiStripLineComponent),
    __metadata("design:type", QueryList),
    __metadata("design:paramtypes", [Object])
], DxGanttComponent.prototype, "stripLinesChildren", null);
DxGanttComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxGanttComponent);
let DxGanttModule = class DxGanttModule {
};
DxGanttModule.ɵfac = function DxGanttModule_Factory(t) { return new (t || DxGanttModule)(); };
DxGanttModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DxGanttModule });
DxGanttModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            DxiColumnModule,
            DxiButtonModule,
            DxoHeaderFilterModule,
            DxoLookupModule,
            DxoFormatModule,
            DxoFormItemModule,
            DxoLabelModule,
            DxiValidationRuleModule,
            DxoContextMenuModule,
            DxiItemModule,
            DxoDependenciesModule,
            DxoEditingModule,
            DxoResourceAssignmentsModule,
            DxoResourcesModule,
            DxiStripLineModule,
            DxoTasksModule,
            DxoToolbarModule,
            DxoValidationModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ], DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxTemplateModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxGanttComponent, [{
        type: Component,
        args: [{
                selector: 'dx-gantt',
                template: '',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { accessKey: [{
            type: Input
        }], activeStateEnabled: [{
            type: Input
        }], allowSelection: [{
            type: Input
        }], columns: [{
            type: Input
        }], contextMenu: [{
            type: Input
        }], dependencies: [{
            type: Input
        }], disabled: [{
            type: Input
        }], editing: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], firstDayOfWeek: [{
            type: Input
        }], focusStateEnabled: [{
            type: Input
        }], height: [{
            type: Input
        }], hint: [{
            type: Input
        }], hoverStateEnabled: [{
            type: Input
        }], resourceAssignments: [{
            type: Input
        }], resources: [{
            type: Input
        }], rootValue: [{
            type: Input
        }], scaleType: [{
            type: Input
        }], selectedRowKey: [{
            type: Input
        }], showResources: [{
            type: Input
        }], showRowLines: [{
            type: Input
        }], stripLines: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], taskContentTemplate: [{
            type: Input
        }], taskListWidth: [{
            type: Input
        }], taskProgressTooltipContentTemplate: [{
            type: Input
        }], tasks: [{
            type: Input
        }], taskTimeTooltipContentTemplate: [{
            type: Input
        }], taskTitlePosition: [{
            type: Input
        }], taskTooltipContentTemplate: [{
            type: Input
        }], toolbar: [{
            type: Input
        }], validation: [{
            type: Input
        }], visible: [{
            type: Input
        }], width: [{
            type: Input
        }], columnsChildren: [{
            type: ContentChildren,
            args: [DxiColumnComponent]
        }], stripLinesChildren: [{
            type: ContentChildren,
            args: [DxiStripLineComponent]
        }], onContentReady: [{
            type: Output
        }], onContextMenuPreparing: [{
            type: Output
        }], onCustomCommand: [{
            type: Output
        }], onDependencyDeleted: [{
            type: Output
        }], onDependencyDeleting: [{
            type: Output
        }], onDependencyInserted: [{
            type: Output
        }], onDependencyInserting: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onResourceAssigned: [{
            type: Output
        }], onResourceAssigning: [{
            type: Output
        }], onResourceDeleted: [{
            type: Output
        }], onResourceDeleting: [{
            type: Output
        }], onResourceInserted: [{
            type: Output
        }], onResourceInserting: [{
            type: Output
        }], onResourceManagerDialogShowing: [{
            type: Output
        }], onResourceUnassigned: [{
            type: Output
        }], onResourceUnassigning: [{
            type: Output
        }], onSelectionChanged: [{
            type: Output
        }], onTaskClick: [{
            type: Output
        }], onTaskDblClick: [{
            type: Output
        }], onTaskDeleted: [{
            type: Output
        }], onTaskDeleting: [{
            type: Output
        }], onTaskEditDialogShowing: [{
            type: Output
        }], onTaskInserted: [{
            type: Output
        }], onTaskInserting: [{
            type: Output
        }], onTaskMoving: [{
            type: Output
        }], onTaskUpdated: [{
            type: Output
        }], onTaskUpdating: [{
            type: Output
        }], accessKeyChange: [{
            type: Output
        }], activeStateEnabledChange: [{
            type: Output
        }], allowSelectionChange: [{
            type: Output
        }], columnsChange: [{
            type: Output
        }], contextMenuChange: [{
            type: Output
        }], dependenciesChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], editingChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], firstDayOfWeekChange: [{
            type: Output
        }], focusStateEnabledChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], hintChange: [{
            type: Output
        }], hoverStateEnabledChange: [{
            type: Output
        }], resourceAssignmentsChange: [{
            type: Output
        }], resourcesChange: [{
            type: Output
        }], rootValueChange: [{
            type: Output
        }], scaleTypeChange: [{
            type: Output
        }], selectedRowKeyChange: [{
            type: Output
        }], showResourcesChange: [{
            type: Output
        }], showRowLinesChange: [{
            type: Output
        }], stripLinesChange: [{
            type: Output
        }], tabIndexChange: [{
            type: Output
        }], taskContentTemplateChange: [{
            type: Output
        }], taskListWidthChange: [{
            type: Output
        }], taskProgressTooltipContentTemplateChange: [{
            type: Output
        }], tasksChange: [{
            type: Output
        }], taskTimeTooltipContentTemplateChange: [{
            type: Output
        }], taskTitlePositionChange: [{
            type: Output
        }], taskTooltipContentTemplateChange: [{
            type: Output
        }], toolbarChange: [{
            type: Output
        }], validationChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxGanttModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxiColumnModule,
                    DxiButtonModule,
                    DxoHeaderFilterModule,
                    DxoLookupModule,
                    DxoFormatModule,
                    DxoFormItemModule,
                    DxoLabelModule,
                    DxiValidationRuleModule,
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoDependenciesModule,
                    DxoEditingModule,
                    DxoResourceAssignmentsModule,
                    DxoResourcesModule,
                    DxiStripLineModule,
                    DxoTasksModule,
                    DxoToolbarModule,
                    DxoValidationModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxGanttComponent
                ],
                exports: [
                    DxGanttComponent,
                    DxiColumnModule,
                    DxiButtonModule,
                    DxoHeaderFilterModule,
                    DxoLookupModule,
                    DxoFormatModule,
                    DxoFormItemModule,
                    DxoLabelModule,
                    DxiValidationRuleModule,
                    DxoContextMenuModule,
                    DxiItemModule,
                    DxoDependenciesModule,
                    DxoEditingModule,
                    DxoResourceAssignmentsModule,
                    DxoResourcesModule,
                    DxiStripLineModule,
                    DxoTasksModule,
                    DxoToolbarModule,
                    DxoValidationModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxGanttModule, { declarations: function () { return [DxGanttComponent]; }, imports: function () { return [DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxGanttComponent, DxiColumnModule,
        DxiButtonModule,
        DxoHeaderFilterModule,
        DxoLookupModule,
        DxoFormatModule,
        DxoFormItemModule,
        DxoLabelModule,
        DxiValidationRuleModule,
        DxoContextMenuModule,
        DxiItemModule,
        DxoDependenciesModule,
        DxoEditingModule,
        DxoResourceAssignmentsModule,
        DxoResourcesModule,
        DxiStripLineModule,
        DxoTasksModule,
        DxoToolbarModule,
        DxoValidationModule,
        DxTemplateModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxGanttComponent, DxGanttModule };

//# sourceMappingURL=devextreme-angular-ui-gantt.js.map