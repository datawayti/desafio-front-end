import { __decorate, __metadata, __param } from 'tslib';
import { TransferState, BrowserTransferStateModule } from '@angular/platform-browser';
import { ElementRef, NgZone, Inject, PLATFORM_ID, Input, Output, EventEmitter, ContentChildren, QueryList, Component, NgModule } from '@angular/core';
import DxPopup from 'devextreme/ui/popup';
import { DxComponent, DxTemplateHost, WatcherHelper, IterableDifferHelper, NestedOptionHost, DxIntegrationModule, DxTemplateModule } from 'devextreme-angular/core';
import { DxiToolbarItemComponent, DxoAnimationModule, DxoHideModule, DxoShowModule, DxoPositionModule, DxoAtModule, DxoBoundaryOffsetModule, DxoCollisionModule, DxoMyModule, DxoOffsetModule, DxiToolbarItemModule } from 'devextreme-angular/ui/nested';

/*!
 * devextreme-angular
 * Version: 21.1.3
 * Build date: Tue May 18 2021
 *
 * Copyright (c) 2012 - 2021 Developer Express Inc. ALL RIGHTS RESERVED
 *
 * This software may be modified and distributed under the terms
 * of the MIT license. See the LICENSE file in the root of the project for details.
 *
 * https://github.com/DevExpress/devextreme-angular
 */
/**
 * The Popup UI component is a pop-up window overlaying the current view.

 */
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from 'devextreme-angular/core';
import * as ɵngcc2 from '@angular/platform-browser';

const _c0 = ["*"];
let DxPopupComponent = class DxPopupComponent extends DxComponent {
    constructor(elementRef, ngZone, templateHost, _watcherHelper, _idh, optionHost, transferState, platformId) {
        super(elementRef, ngZone, templateHost, _watcherHelper, transferState, platformId);
        this._watcherHelper = _watcherHelper;
        this._idh = _idh;
        this._createEventEmitters([
            { subscribe: 'contentReady', emit: 'onContentReady' },
            { subscribe: 'disposing', emit: 'onDisposing' },
            { subscribe: 'hidden', emit: 'onHidden' },
            { subscribe: 'hiding', emit: 'onHiding' },
            { subscribe: 'initialized', emit: 'onInitialized' },
            { subscribe: 'optionChanged', emit: 'onOptionChanged' },
            { subscribe: 'resize', emit: 'onResize' },
            { subscribe: 'resizeEnd', emit: 'onResizeEnd' },
            { subscribe: 'resizeStart', emit: 'onResizeStart' },
            { subscribe: 'showing', emit: 'onShowing' },
            { subscribe: 'shown', emit: 'onShown' },
            { subscribe: 'titleRendered', emit: 'onTitleRendered' },
            { emit: 'accessKeyChange' },
            { emit: 'animationChange' },
            { emit: 'closeOnOutsideClickChange' },
            { emit: 'containerChange' },
            { emit: 'contentTemplateChange' },
            { emit: 'deferRenderingChange' },
            { emit: 'disabledChange' },
            { emit: 'dragEnabledChange' },
            { emit: 'elementAttrChange' },
            { emit: 'focusStateEnabledChange' },
            { emit: 'fullScreenChange' },
            { emit: 'heightChange' },
            { emit: 'hintChange' },
            { emit: 'hoverStateEnabledChange' },
            { emit: 'maxHeightChange' },
            { emit: 'maxWidthChange' },
            { emit: 'minHeightChange' },
            { emit: 'minWidthChange' },
            { emit: 'positionChange' },
            { emit: 'resizeEnabledChange' },
            { emit: 'rtlEnabledChange' },
            { emit: 'shadingChange' },
            { emit: 'shadingColorChange' },
            { emit: 'showCloseButtonChange' },
            { emit: 'showTitleChange' },
            { emit: 'tabIndexChange' },
            { emit: 'titleChange' },
            { emit: 'titleTemplateChange' },
            { emit: 'toolbarItemsChange' },
            { emit: 'visibleChange' },
            { emit: 'widthChange' }
        ]);
        this._idh.setHost(this);
        optionHost.setHost(this);
    }
    /**
     * 
    
     */
    get accessKey() {
        return this._getOption('accessKey');
    }
    set accessKey(value) {
        this._setOption('accessKey', value);
    }
    /**
     * 
    
     */
    get animation() {
        return this._getOption('animation');
    }
    set animation(value) {
        this._setOption('animation', value);
    }
    /**
     * 
    
     */
    get closeOnOutsideClick() {
        return this._getOption('closeOnOutsideClick');
    }
    set closeOnOutsideClick(value) {
        this._setOption('closeOnOutsideClick', value);
    }
    /**
     * 
    
     */
    get container() {
        return this._getOption('container');
    }
    set container(value) {
        this._setOption('container', value);
    }
    /**
     * 
    
     */
    get contentTemplate() {
        return this._getOption('contentTemplate');
    }
    set contentTemplate(value) {
        this._setOption('contentTemplate', value);
    }
    /**
     * 
    
     */
    get deferRendering() {
        return this._getOption('deferRendering');
    }
    set deferRendering(value) {
        this._setOption('deferRendering', value);
    }
    /**
     * 
    
     */
    get disabled() {
        return this._getOption('disabled');
    }
    set disabled(value) {
        this._setOption('disabled', value);
    }
    /**
     * 
    
     */
    get dragEnabled() {
        return this._getOption('dragEnabled');
    }
    set dragEnabled(value) {
        this._setOption('dragEnabled', value);
    }
    /**
     * 
    
     */
    get elementAttr() {
        return this._getOption('elementAttr');
    }
    set elementAttr(value) {
        this._setOption('elementAttr', value);
    }
    /**
     * 
    
     */
    get focusStateEnabled() {
        return this._getOption('focusStateEnabled');
    }
    set focusStateEnabled(value) {
        this._setOption('focusStateEnabled', value);
    }
    /**
     * 
    
     */
    get fullScreen() {
        return this._getOption('fullScreen');
    }
    set fullScreen(value) {
        this._setOption('fullScreen', value);
    }
    /**
     * 
    
     */
    get height() {
        return this._getOption('height');
    }
    set height(value) {
        this._setOption('height', value);
    }
    /**
     * 
    
     */
    get hint() {
        return this._getOption('hint');
    }
    set hint(value) {
        this._setOption('hint', value);
    }
    /**
     * 
    
     */
    get hoverStateEnabled() {
        return this._getOption('hoverStateEnabled');
    }
    set hoverStateEnabled(value) {
        this._setOption('hoverStateEnabled', value);
    }
    /**
     * 
    
     */
    get maxHeight() {
        return this._getOption('maxHeight');
    }
    set maxHeight(value) {
        this._setOption('maxHeight', value);
    }
    /**
     * 
    
     */
    get maxWidth() {
        return this._getOption('maxWidth');
    }
    set maxWidth(value) {
        this._setOption('maxWidth', value);
    }
    /**
     * 
    
     */
    get minHeight() {
        return this._getOption('minHeight');
    }
    set minHeight(value) {
        this._setOption('minHeight', value);
    }
    /**
     * 
    
     */
    get minWidth() {
        return this._getOption('minWidth');
    }
    set minWidth(value) {
        this._setOption('minWidth', value);
    }
    /**
     * 
    
     */
    get position() {
        return this._getOption('position');
    }
    set position(value) {
        this._setOption('position', value);
    }
    /**
     * 
    
     */
    get resizeEnabled() {
        return this._getOption('resizeEnabled');
    }
    set resizeEnabled(value) {
        this._setOption('resizeEnabled', value);
    }
    /**
     * 
    
     */
    get rtlEnabled() {
        return this._getOption('rtlEnabled');
    }
    set rtlEnabled(value) {
        this._setOption('rtlEnabled', value);
    }
    /**
     * 
    
     */
    get shading() {
        return this._getOption('shading');
    }
    set shading(value) {
        this._setOption('shading', value);
    }
    /**
     * 
    
     */
    get shadingColor() {
        return this._getOption('shadingColor');
    }
    set shadingColor(value) {
        this._setOption('shadingColor', value);
    }
    /**
     * 
    
     */
    get showCloseButton() {
        return this._getOption('showCloseButton');
    }
    set showCloseButton(value) {
        this._setOption('showCloseButton', value);
    }
    /**
     * 
    
     */
    get showTitle() {
        return this._getOption('showTitle');
    }
    set showTitle(value) {
        this._setOption('showTitle', value);
    }
    /**
     * 
    
     */
    get tabIndex() {
        return this._getOption('tabIndex');
    }
    set tabIndex(value) {
        this._setOption('tabIndex', value);
    }
    /**
     * 
    
     */
    get title() {
        return this._getOption('title');
    }
    set title(value) {
        this._setOption('title', value);
    }
    /**
     * 
    
     */
    get titleTemplate() {
        return this._getOption('titleTemplate');
    }
    set titleTemplate(value) {
        this._setOption('titleTemplate', value);
    }
    /**
     * 
    
     */
    get toolbarItems() {
        return this._getOption('toolbarItems');
    }
    set toolbarItems(value) {
        this._setOption('toolbarItems', value);
    }
    /**
     * 
    
     */
    get visible() {
        return this._getOption('visible');
    }
    set visible(value) {
        this._setOption('visible', value);
    }
    /**
     * 
    
     */
    get width() {
        return this._getOption('width');
    }
    set width(value) {
        this._setOption('width', value);
    }
    get toolbarItemsChildren() {
        return this._getOption('toolbarItems');
    }
    set toolbarItemsChildren(value) {
        this.setChildren('toolbarItems', value);
    }
    _createInstance(element, options) {
        return new DxPopup(element, options);
    }
    ngOnDestroy() {
        this._destroyWidget();
    }
    ngOnChanges(changes) {
        super.ngOnChanges(changes);
        this.setupChanges('toolbarItems', changes);
    }
    setupChanges(prop, changes) {
        if (!(prop in this._optionsToUpdate)) {
            this._idh.setup(prop, changes);
        }
    }
    ngDoCheck() {
        this._idh.doCheck('toolbarItems');
        this._watcherHelper.checkWatchers();
        super.ngDoCheck();
        super.clearChangedOptions();
    }
    _setOption(name, value) {
        let isSetup = this._idh.setupSingle(name, value);
        let isChanged = this._idh.getChanges(name, value) !== null;
        if (isSetup || isChanged) {
            super._setOption(name, value);
        }
    }
};
DxPopupComponent.ɵfac = function DxPopupComponent_Factory(t) { return new (t || DxPopupComponent)(ɵngcc0.ɵɵdirectiveInject(ɵngcc0.ElementRef), ɵngcc0.ɵɵdirectiveInject(ɵngcc0.NgZone), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.DxTemplateHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.WatcherHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.IterableDifferHelper), ɵngcc0.ɵɵdirectiveInject(ɵngcc1.NestedOptionHost), ɵngcc0.ɵɵdirectiveInject(ɵngcc2.TransferState), ɵngcc0.ɵɵdirectiveInject(PLATFORM_ID)); };
DxPopupComponent.ɵcmp = /*@__PURE__*/ ɵngcc0.ɵɵdefineComponent({ type: DxPopupComponent, selectors: [["dx-popup"]], contentQueries: function DxPopupComponent_ContentQueries(rf, ctx, dirIndex) { if (rf & 1) {
        ɵngcc0.ɵɵcontentQuery(dirIndex, DxiToolbarItemComponent, 4);
    } if (rf & 2) {
        let _t;
        ɵngcc0.ɵɵqueryRefresh(_t = ɵngcc0.ɵɵloadQuery()) && (ctx.toolbarItemsChildren = _t);
    } }, inputs: { accessKey: "accessKey", animation: "animation", closeOnOutsideClick: "closeOnOutsideClick", container: "container", contentTemplate: "contentTemplate", deferRendering: "deferRendering", disabled: "disabled", dragEnabled: "dragEnabled", elementAttr: "elementAttr", focusStateEnabled: "focusStateEnabled", fullScreen: "fullScreen", height: "height", hint: "hint", hoverStateEnabled: "hoverStateEnabled", maxHeight: "maxHeight", maxWidth: "maxWidth", minHeight: "minHeight", minWidth: "minWidth", position: "position", resizeEnabled: "resizeEnabled", rtlEnabled: "rtlEnabled", shading: "shading", shadingColor: "shadingColor", showCloseButton: "showCloseButton", showTitle: "showTitle", tabIndex: "tabIndex", title: "title", titleTemplate: "titleTemplate", toolbarItems: "toolbarItems", visible: "visible", width: "width" }, outputs: { onContentReady: "onContentReady", onDisposing: "onDisposing", onHidden: "onHidden", onHiding: "onHiding", onInitialized: "onInitialized", onOptionChanged: "onOptionChanged", onResize: "onResize", onResizeEnd: "onResizeEnd", onResizeStart: "onResizeStart", onShowing: "onShowing", onShown: "onShown", onTitleRendered: "onTitleRendered", accessKeyChange: "accessKeyChange", animationChange: "animationChange", closeOnOutsideClickChange: "closeOnOutsideClickChange", containerChange: "containerChange", contentTemplateChange: "contentTemplateChange", deferRenderingChange: "deferRenderingChange", disabledChange: "disabledChange", dragEnabledChange: "dragEnabledChange", elementAttrChange: "elementAttrChange", focusStateEnabledChange: "focusStateEnabledChange", fullScreenChange: "fullScreenChange", heightChange: "heightChange", hintChange: "hintChange", hoverStateEnabledChange: "hoverStateEnabledChange", maxHeightChange: "maxHeightChange", maxWidthChange: "maxWidthChange", minHeightChange: "minHeightChange", minWidthChange: "minWidthChange", positionChange: "positionChange", resizeEnabledChange: "resizeEnabledChange", rtlEnabledChange: "rtlEnabledChange", shadingChange: "shadingChange", shadingColorChange: "shadingColorChange", showCloseButtonChange: "showCloseButtonChange", showTitleChange: "showTitleChange", tabIndexChange: "tabIndexChange", titleChange: "titleChange", titleTemplateChange: "titleTemplateChange", toolbarItemsChange: "toolbarItemsChange", visibleChange: "visibleChange", widthChange: "widthChange" }, features: [ɵngcc0.ɵɵProvidersFeature([
            DxTemplateHost,
            WatcherHelper,
            NestedOptionHost,
            IterableDifferHelper
        ]), ɵngcc0.ɵɵInheritDefinitionFeature, ɵngcc0.ɵɵNgOnChangesFeature], ngContentSelectors: _c0, decls: 1, vars: 0, template: function DxPopupComponent_Template(rf, ctx) { if (rf & 1) {
        ɵngcc0.ɵɵprojectionDef();
        ɵngcc0.ɵɵprojection(0);
    } }, encapsulation: 2 });
DxPopupComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: NgZone },
    { type: DxTemplateHost },
    { type: WatcherHelper },
    { type: IterableDifferHelper },
    { type: NestedOptionHost },
    { type: TransferState },
    { type: undefined, decorators: [{ type: Inject, args: [PLATFORM_ID,] }] }
];
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxPopupComponent.prototype, "accessKey", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "animation", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "closeOnOutsideClick", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "container", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "contentTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "deferRendering", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "disabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "dragEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "elementAttr", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "focusStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "fullScreen", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "height", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxPopupComponent.prototype, "hint", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "hoverStateEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "maxHeight", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "maxWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "minHeight", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "minWidth", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "position", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "resizeEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "rtlEnabled", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "shading", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxPopupComponent.prototype, "shadingColor", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "showCloseButton", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "showTitle", null);
__decorate([
    Input(),
    __metadata("design:type", Number),
    __metadata("design:paramtypes", [Number])
], DxPopupComponent.prototype, "tabIndex", null);
__decorate([
    Input(),
    __metadata("design:type", String),
    __metadata("design:paramtypes", [String])
], DxPopupComponent.prototype, "title", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "titleTemplate", null);
__decorate([
    Input(),
    __metadata("design:type", Array),
    __metadata("design:paramtypes", [Array])
], DxPopupComponent.prototype, "toolbarItems", null);
__decorate([
    Input(),
    __metadata("design:type", Boolean),
    __metadata("design:paramtypes", [Boolean])
], DxPopupComponent.prototype, "visible", null);
__decorate([
    Input(),
    __metadata("design:type", Object),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "width", null);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onContentReady", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onDisposing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onHidden", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onHiding", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onInitialized", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onOptionChanged", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onResize", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onResizeEnd", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onResizeStart", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onShowing", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onShown", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "onTitleRendered", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "accessKeyChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "animationChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "closeOnOutsideClickChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "containerChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "contentTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "deferRenderingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "disabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "dragEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "elementAttrChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "focusStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "fullScreenChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "heightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "hintChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "hoverStateEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "maxHeightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "maxWidthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "minHeightChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "minWidthChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "positionChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "resizeEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "rtlEnabledChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "shadingChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "shadingColorChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "showCloseButtonChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "showTitleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "tabIndexChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "titleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "titleTemplateChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "toolbarItemsChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "visibleChange", void 0);
__decorate([
    Output(),
    __metadata("design:type", EventEmitter)
], DxPopupComponent.prototype, "widthChange", void 0);
__decorate([
    ContentChildren(DxiToolbarItemComponent),
    __metadata("design:type", QueryList),
    __metadata("design:paramtypes", [Object])
], DxPopupComponent.prototype, "toolbarItemsChildren", null);
DxPopupComponent = __decorate([ __param(7, Inject(PLATFORM_ID)),
    __metadata("design:paramtypes", [ElementRef, NgZone, DxTemplateHost,
        WatcherHelper,
        IterableDifferHelper,
        NestedOptionHost,
        TransferState, Object])
], DxPopupComponent);
let DxPopupModule = class DxPopupModule {
};
DxPopupModule.ɵfac = function DxPopupModule_Factory(t) { return new (t || DxPopupModule)(); };
DxPopupModule.ɵmod = /*@__PURE__*/ ɵngcc0.ɵɵdefineNgModule({ type: DxPopupModule });
DxPopupModule.ɵinj = /*@__PURE__*/ ɵngcc0.ɵɵdefineInjector({ imports: [[
            DxoAnimationModule,
            DxoHideModule,
            DxoShowModule,
            DxoPositionModule,
            DxoAtModule,
            DxoBoundaryOffsetModule,
            DxoCollisionModule,
            DxoMyModule,
            DxoOffsetModule,
            DxiToolbarItemModule,
            DxIntegrationModule,
            DxTemplateModule,
            BrowserTransferStateModule
        ], DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxiToolbarItemModule,
        DxTemplateModule] });
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxPopupComponent, [{
        type: Component,
        args: [{
                selector: 'dx-popup',
                template: '<ng-content></ng-content>',
                providers: [
                    DxTemplateHost,
                    WatcherHelper,
                    NestedOptionHost,
                    IterableDifferHelper
                ]
            }]
    }], function () { return [{ type: ɵngcc0.ElementRef }, { type: ɵngcc0.NgZone }, { type: ɵngcc1.DxTemplateHost }, { type: ɵngcc1.WatcherHelper }, { type: ɵngcc1.IterableDifferHelper }, { type: ɵngcc1.NestedOptionHost }, { type: ɵngcc2.TransferState }, { type: undefined, decorators: [{
                type: Inject,
                args: [PLATFORM_ID]
            }] }]; }, { accessKey: [{
            type: Input
        }], animation: [{
            type: Input
        }], closeOnOutsideClick: [{
            type: Input
        }], container: [{
            type: Input
        }], contentTemplate: [{
            type: Input
        }], deferRendering: [{
            type: Input
        }], disabled: [{
            type: Input
        }], dragEnabled: [{
            type: Input
        }], elementAttr: [{
            type: Input
        }], focusStateEnabled: [{
            type: Input
        }], fullScreen: [{
            type: Input
        }], height: [{
            type: Input
        }], hint: [{
            type: Input
        }], hoverStateEnabled: [{
            type: Input
        }], maxHeight: [{
            type: Input
        }], maxWidth: [{
            type: Input
        }], minHeight: [{
            type: Input
        }], minWidth: [{
            type: Input
        }], position: [{
            type: Input
        }], resizeEnabled: [{
            type: Input
        }], rtlEnabled: [{
            type: Input
        }], shading: [{
            type: Input
        }], shadingColor: [{
            type: Input
        }], showCloseButton: [{
            type: Input
        }], showTitle: [{
            type: Input
        }], tabIndex: [{
            type: Input
        }], title: [{
            type: Input
        }], titleTemplate: [{
            type: Input
        }], toolbarItems: [{
            type: Input
        }], visible: [{
            type: Input
        }], width: [{
            type: Input
        }], toolbarItemsChildren: [{
            type: ContentChildren,
            args: [DxiToolbarItemComponent]
        }], onContentReady: [{
            type: Output
        }], onDisposing: [{
            type: Output
        }], onHidden: [{
            type: Output
        }], onHiding: [{
            type: Output
        }], onInitialized: [{
            type: Output
        }], onOptionChanged: [{
            type: Output
        }], onResize: [{
            type: Output
        }], onResizeEnd: [{
            type: Output
        }], onResizeStart: [{
            type: Output
        }], onShowing: [{
            type: Output
        }], onShown: [{
            type: Output
        }], onTitleRendered: [{
            type: Output
        }], accessKeyChange: [{
            type: Output
        }], animationChange: [{
            type: Output
        }], closeOnOutsideClickChange: [{
            type: Output
        }], containerChange: [{
            type: Output
        }], contentTemplateChange: [{
            type: Output
        }], deferRenderingChange: [{
            type: Output
        }], disabledChange: [{
            type: Output
        }], dragEnabledChange: [{
            type: Output
        }], elementAttrChange: [{
            type: Output
        }], focusStateEnabledChange: [{
            type: Output
        }], fullScreenChange: [{
            type: Output
        }], heightChange: [{
            type: Output
        }], hintChange: [{
            type: Output
        }], hoverStateEnabledChange: [{
            type: Output
        }], maxHeightChange: [{
            type: Output
        }], maxWidthChange: [{
            type: Output
        }], minHeightChange: [{
            type: Output
        }], minWidthChange: [{
            type: Output
        }], positionChange: [{
            type: Output
        }], resizeEnabledChange: [{
            type: Output
        }], rtlEnabledChange: [{
            type: Output
        }], shadingChange: [{
            type: Output
        }], shadingColorChange: [{
            type: Output
        }], showCloseButtonChange: [{
            type: Output
        }], showTitleChange: [{
            type: Output
        }], tabIndexChange: [{
            type: Output
        }], titleChange: [{
            type: Output
        }], titleTemplateChange: [{
            type: Output
        }], toolbarItemsChange: [{
            type: Output
        }], visibleChange: [{
            type: Output
        }], widthChange: [{
            type: Output
        }] }); })();
(function () { (typeof ngDevMode === "undefined" || ngDevMode) && ɵngcc0.ɵsetClassMetadata(DxPopupModule, [{
        type: NgModule,
        args: [{
                imports: [
                    DxoAnimationModule,
                    DxoHideModule,
                    DxoShowModule,
                    DxoPositionModule,
                    DxoAtModule,
                    DxoBoundaryOffsetModule,
                    DxoCollisionModule,
                    DxoMyModule,
                    DxoOffsetModule,
                    DxiToolbarItemModule,
                    DxIntegrationModule,
                    DxTemplateModule,
                    BrowserTransferStateModule
                ],
                declarations: [
                    DxPopupComponent
                ],
                exports: [
                    DxPopupComponent,
                    DxoAnimationModule,
                    DxoHideModule,
                    DxoShowModule,
                    DxoPositionModule,
                    DxoAtModule,
                    DxoBoundaryOffsetModule,
                    DxoCollisionModule,
                    DxoMyModule,
                    DxoOffsetModule,
                    DxiToolbarItemModule,
                    DxTemplateModule
                ]
            }]
    }], null, null); })();
(function () { (typeof ngJitMode === "undefined" || ngJitMode) && ɵngcc0.ɵɵsetNgModuleScope(DxPopupModule, { declarations: function () { return [DxPopupComponent]; }, imports: function () { return [DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxiToolbarItemModule,
        DxIntegrationModule,
        DxTemplateModule,
        BrowserTransferStateModule]; }, exports: function () { return [DxPopupComponent, DxoAnimationModule,
        DxoHideModule,
        DxoShowModule,
        DxoPositionModule,
        DxoAtModule,
        DxoBoundaryOffsetModule,
        DxoCollisionModule,
        DxoMyModule,
        DxoOffsetModule,
        DxiToolbarItemModule,
        DxTemplateModule]; } }); })();

/**
 * Generated bundle index. Do not edit.
 */

export { DxPopupComponent, DxPopupModule };

//# sourceMappingURL=devextreme-angular-ui-popup.js.map